
led_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004048  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004220  08004220  00014220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004260  08004260  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004260  08004260  00014260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004268  08004268  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004268  08004268  00014268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800426c  0800426c  0001426c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004270  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000000c  0800427c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  0800427c  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ccbb  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d52  00000000  00000000  0002cd3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009f0  00000000  00000000  0002ea90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007a5  00000000  00000000  0002f480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c1a8  00000000  00000000  0002fc25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c843  00000000  00000000  0004bdcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b2b35  00000000  00000000  00058610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000027d4  00000000  00000000  0010b148  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0010d91c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004208 	.word	0x08004208

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08004208 	.word	0x08004208

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fa2f 	bl	800097a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f83a 	bl	8000594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 f8d0 	bl	80006c4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000524:	f000 f882 	bl	800062c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
 // HAL_UART_Receive_IT(&huart1,&rxData,1);
  HAL_UART_Receive_IT(&huart1, RX_BUFFER, BUFFER_LEN);
 8000528:	2201      	movs	r2, #1
 800052a:	4918      	ldr	r1, [pc, #96]	; (800058c <main+0x78>)
 800052c:	4818      	ldr	r0, [pc, #96]	; (8000590 <main+0x7c>)
 800052e:	f001 fe21 	bl	8002174 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(RX_BUFFER[0] == '1')
 8000532:	4b16      	ldr	r3, [pc, #88]	; (800058c <main+0x78>)
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	2b31      	cmp	r3, #49	; 0x31
 8000538:	d106      	bne.n	8000548 <main+0x34>
	         {
	             HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 800053a:	2201      	movs	r2, #1
 800053c:	2120      	movs	r1, #32
 800053e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000542:	f000 fddd 	bl	8001100 <HAL_GPIO_WritePin>
 8000546:	e7f4      	b.n	8000532 <main+0x1e>
	         }
	         else if(RX_BUFFER[0] == '0')
 8000548:	4b10      	ldr	r3, [pc, #64]	; (800058c <main+0x78>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	2b30      	cmp	r3, #48	; 0x30
 800054e:	d106      	bne.n	800055e <main+0x4a>
	         {
	             HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000550:	2200      	movs	r2, #0
 8000552:	2120      	movs	r1, #32
 8000554:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000558:	f000 fdd2 	bl	8001100 <HAL_GPIO_WritePin>
 800055c:	e7e9      	b.n	8000532 <main+0x1e>
	         }
	         else if(RX_BUFFER[0] == '2')
 800055e:	4b0b      	ldr	r3, [pc, #44]	; (800058c <main+0x78>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	2b32      	cmp	r3, #50	; 0x32
 8000564:	d106      	bne.n	8000574 <main+0x60>
	        	         {
	        	             HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8000566:	2201      	movs	r2, #1
 8000568:	2140      	movs	r1, #64	; 0x40
 800056a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800056e:	f000 fdc7 	bl	8001100 <HAL_GPIO_WritePin>
 8000572:	e7de      	b.n	8000532 <main+0x1e>
	        	         }
	         else if(RX_BUFFER[0] == '3')
 8000574:	4b05      	ldr	r3, [pc, #20]	; (800058c <main+0x78>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	2b33      	cmp	r3, #51	; 0x33
 800057a:	d1da      	bne.n	8000532 <main+0x1e>
	         	        	         {
	         	        	             HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 800057c:	2200      	movs	r2, #0
 800057e:	2140      	movs	r1, #64	; 0x40
 8000580:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000584:	f000 fdbc 	bl	8001100 <HAL_GPIO_WritePin>
	  if(RX_BUFFER[0] == '1')
 8000588:	e7d3      	b.n	8000532 <main+0x1e>
 800058a:	bf00      	nop
 800058c:	200000bc 	.word	0x200000bc
 8000590:	20000028 	.word	0x20000028

08000594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b094      	sub	sp, #80	; 0x50
 8000598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059a:	f107 0318 	add.w	r3, r7, #24
 800059e:	2238      	movs	r2, #56	; 0x38
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f003 fe04 	bl	80041b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a8:	1d3b      	adds	r3, r7, #4
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	605a      	str	r2, [r3, #4]
 80005b0:	609a      	str	r2, [r3, #8]
 80005b2:	60da      	str	r2, [r3, #12]
 80005b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005b6:	2000      	movs	r0, #0
 80005b8:	f000 fdba 	bl	8001130 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005bc:	2302      	movs	r3, #2
 80005be:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c6:	2340      	movs	r3, #64	; 0x40
 80005c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ca:	2302      	movs	r3, #2
 80005cc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ce:	2302      	movs	r3, #2
 80005d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80005d2:	2304      	movs	r3, #4
 80005d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005d6:	2355      	movs	r3, #85	; 0x55
 80005d8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005da:	2302      	movs	r3, #2
 80005dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005de:	2302      	movs	r3, #2
 80005e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005e2:	2302      	movs	r3, #2
 80005e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e6:	f107 0318 	add.w	r3, r7, #24
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 fe54 	bl	8001298 <HAL_RCC_OscConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005f6:	f000 f8c7 	bl	8000788 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fa:	230f      	movs	r3, #15
 80005fc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fe:	2303      	movs	r3, #3
 8000600:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000602:	2300      	movs	r3, #0
 8000604:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	2104      	movs	r1, #4
 8000612:	4618      	mov	r0, r3
 8000614:	f001 f952 	bl	80018bc <HAL_RCC_ClockConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800061e:	f000 f8b3 	bl	8000788 <Error_Handler>
  }
}
 8000622:	bf00      	nop
 8000624:	3750      	adds	r7, #80	; 0x50
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
	...

0800062c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000630:	4b22      	ldr	r3, [pc, #136]	; (80006bc <MX_USART1_UART_Init+0x90>)
 8000632:	4a23      	ldr	r2, [pc, #140]	; (80006c0 <MX_USART1_UART_Init+0x94>)
 8000634:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000636:	4b21      	ldr	r3, [pc, #132]	; (80006bc <MX_USART1_UART_Init+0x90>)
 8000638:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800063c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800063e:	4b1f      	ldr	r3, [pc, #124]	; (80006bc <MX_USART1_UART_Init+0x90>)
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000644:	4b1d      	ldr	r3, [pc, #116]	; (80006bc <MX_USART1_UART_Init+0x90>)
 8000646:	2200      	movs	r2, #0
 8000648:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800064a:	4b1c      	ldr	r3, [pc, #112]	; (80006bc <MX_USART1_UART_Init+0x90>)
 800064c:	2200      	movs	r2, #0
 800064e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000650:	4b1a      	ldr	r3, [pc, #104]	; (80006bc <MX_USART1_UART_Init+0x90>)
 8000652:	220c      	movs	r2, #12
 8000654:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000656:	4b19      	ldr	r3, [pc, #100]	; (80006bc <MX_USART1_UART_Init+0x90>)
 8000658:	2200      	movs	r2, #0
 800065a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800065c:	4b17      	ldr	r3, [pc, #92]	; (80006bc <MX_USART1_UART_Init+0x90>)
 800065e:	2200      	movs	r2, #0
 8000660:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000662:	4b16      	ldr	r3, [pc, #88]	; (80006bc <MX_USART1_UART_Init+0x90>)
 8000664:	2200      	movs	r2, #0
 8000666:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000668:	4b14      	ldr	r3, [pc, #80]	; (80006bc <MX_USART1_UART_Init+0x90>)
 800066a:	2200      	movs	r2, #0
 800066c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800066e:	4b13      	ldr	r3, [pc, #76]	; (80006bc <MX_USART1_UART_Init+0x90>)
 8000670:	2200      	movs	r2, #0
 8000672:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000674:	4811      	ldr	r0, [pc, #68]	; (80006bc <MX_USART1_UART_Init+0x90>)
 8000676:	f001 fd2d 	bl	80020d4 <HAL_UART_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000680:	f000 f882 	bl	8000788 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000684:	2100      	movs	r1, #0
 8000686:	480d      	ldr	r0, [pc, #52]	; (80006bc <MX_USART1_UART_Init+0x90>)
 8000688:	f003 fcc7 	bl	800401a <HAL_UARTEx_SetTxFifoThreshold>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000692:	f000 f879 	bl	8000788 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000696:	2100      	movs	r1, #0
 8000698:	4808      	ldr	r0, [pc, #32]	; (80006bc <MX_USART1_UART_Init+0x90>)
 800069a:	f003 fcfc 	bl	8004096 <HAL_UARTEx_SetRxFifoThreshold>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80006a4:	f000 f870 	bl	8000788 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80006a8:	4804      	ldr	r0, [pc, #16]	; (80006bc <MX_USART1_UART_Init+0x90>)
 80006aa:	f003 fc7d 	bl	8003fa8 <HAL_UARTEx_DisableFifoMode>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80006b4:	f000 f868 	bl	8000788 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000028 	.word	0x20000028
 80006c0:	40013800 	.word	0x40013800

080006c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b088      	sub	sp, #32
 80006c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ca:	f107 030c 	add.w	r3, r7, #12
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]
 80006d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006da:	4b1e      	ldr	r3, [pc, #120]	; (8000754 <MX_GPIO_Init+0x90>)
 80006dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006de:	4a1d      	ldr	r2, [pc, #116]	; (8000754 <MX_GPIO_Init+0x90>)
 80006e0:	f043 0320 	orr.w	r3, r3, #32
 80006e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006e6:	4b1b      	ldr	r3, [pc, #108]	; (8000754 <MX_GPIO_Init+0x90>)
 80006e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ea:	f003 0320 	and.w	r3, r3, #32
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f2:	4b18      	ldr	r3, [pc, #96]	; (8000754 <MX_GPIO_Init+0x90>)
 80006f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f6:	4a17      	ldr	r2, [pc, #92]	; (8000754 <MX_GPIO_Init+0x90>)
 80006f8:	f043 0301 	orr.w	r3, r3, #1
 80006fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006fe:	4b15      	ldr	r3, [pc, #84]	; (8000754 <MX_GPIO_Init+0x90>)
 8000700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070a:	4b12      	ldr	r3, [pc, #72]	; (8000754 <MX_GPIO_Init+0x90>)
 800070c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070e:	4a11      	ldr	r2, [pc, #68]	; (8000754 <MX_GPIO_Init+0x90>)
 8000710:	f043 0304 	orr.w	r3, r3, #4
 8000714:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000716:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <MX_GPIO_Init+0x90>)
 8000718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071a:	f003 0304 	and.w	r3, r3, #4
 800071e:	603b      	str	r3, [r7, #0]
 8000720:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	2160      	movs	r1, #96	; 0x60
 8000726:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800072a:	f000 fce9 	bl	8001100 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800072e:	2360      	movs	r3, #96	; 0x60
 8000730:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000732:	2301      	movs	r3, #1
 8000734:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073a:	2300      	movs	r3, #0
 800073c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800073e:	f107 030c 	add.w	r3, r7, #12
 8000742:	4619      	mov	r1, r3
 8000744:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000748:	f000 fb58 	bl	8000dfc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800074c:	bf00      	nop
 800074e:	3720      	adds	r7, #32
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40021000 	.word	0x40021000

08000758 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
    if(huart->Instance == huart1.Instance)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <HAL_UART_RxCpltCallback+0x28>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	429a      	cmp	r2, r3
 800076a:	d104      	bne.n	8000776 <HAL_UART_RxCpltCallback+0x1e>
    {
    HAL_UART_Receive_IT(&huart1, RX_BUFFER, BUFFER_LEN);
 800076c:	2201      	movs	r2, #1
 800076e:	4905      	ldr	r1, [pc, #20]	; (8000784 <HAL_UART_RxCpltCallback+0x2c>)
 8000770:	4803      	ldr	r0, [pc, #12]	; (8000780 <HAL_UART_RxCpltCallback+0x28>)
 8000772:	f001 fcff 	bl	8002174 <HAL_UART_Receive_IT>
    }
}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000028 	.word	0x20000028
 8000784:	200000bc 	.word	0x200000bc

08000788 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800078c:	b672      	cpsid	i
}
 800078e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000790:	e7fe      	b.n	8000790 <Error_Handler+0x8>
	...

08000794 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800079a:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <HAL_MspInit+0x44>)
 800079c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800079e:	4a0e      	ldr	r2, [pc, #56]	; (80007d8 <HAL_MspInit+0x44>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	6613      	str	r3, [r2, #96]	; 0x60
 80007a6:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <HAL_MspInit+0x44>)
 80007a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b2:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <HAL_MspInit+0x44>)
 80007b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007b6:	4a08      	ldr	r2, [pc, #32]	; (80007d8 <HAL_MspInit+0x44>)
 80007b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007bc:	6593      	str	r3, [r2, #88]	; 0x58
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <HAL_MspInit+0x44>)
 80007c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c6:	603b      	str	r3, [r7, #0]
 80007c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80007ca:	f000 fd55 	bl	8001278 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40021000 	.word	0x40021000

080007dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b09a      	sub	sp, #104	; 0x68
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007f4:	f107 0310 	add.w	r3, r7, #16
 80007f8:	2244      	movs	r2, #68	; 0x44
 80007fa:	2100      	movs	r1, #0
 80007fc:	4618      	mov	r0, r3
 80007fe:	f003 fcd7 	bl	80041b0 <memset>
  if(huart->Instance==USART1)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4a22      	ldr	r2, [pc, #136]	; (8000890 <HAL_UART_MspInit+0xb4>)
 8000808:	4293      	cmp	r3, r2
 800080a:	d13d      	bne.n	8000888 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800080c:	2301      	movs	r3, #1
 800080e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000810:	2300      	movs	r3, #0
 8000812:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000814:	f107 0310 	add.w	r3, r7, #16
 8000818:	4618      	mov	r0, r3
 800081a:	f001 fa6b 	bl	8001cf4 <HAL_RCCEx_PeriphCLKConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000824:	f7ff ffb0 	bl	8000788 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000828:	4b1a      	ldr	r3, [pc, #104]	; (8000894 <HAL_UART_MspInit+0xb8>)
 800082a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800082c:	4a19      	ldr	r2, [pc, #100]	; (8000894 <HAL_UART_MspInit+0xb8>)
 800082e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000832:	6613      	str	r3, [r2, #96]	; 0x60
 8000834:	4b17      	ldr	r3, [pc, #92]	; (8000894 <HAL_UART_MspInit+0xb8>)
 8000836:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000838:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800083c:	60fb      	str	r3, [r7, #12]
 800083e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000840:	4b14      	ldr	r3, [pc, #80]	; (8000894 <HAL_UART_MspInit+0xb8>)
 8000842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000844:	4a13      	ldr	r2, [pc, #76]	; (8000894 <HAL_UART_MspInit+0xb8>)
 8000846:	f043 0304 	orr.w	r3, r3, #4
 800084a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800084c:	4b11      	ldr	r3, [pc, #68]	; (8000894 <HAL_UART_MspInit+0xb8>)
 800084e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000850:	f003 0304 	and.w	r3, r3, #4
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000858:	2330      	movs	r3, #48	; 0x30
 800085a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085c:	2302      	movs	r3, #2
 800085e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000864:	2300      	movs	r3, #0
 8000866:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000868:	2307      	movs	r3, #7
 800086a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800086c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000870:	4619      	mov	r1, r3
 8000872:	4809      	ldr	r0, [pc, #36]	; (8000898 <HAL_UART_MspInit+0xbc>)
 8000874:	f000 fac2 	bl	8000dfc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000878:	2200      	movs	r2, #0
 800087a:	2100      	movs	r1, #0
 800087c:	2025      	movs	r0, #37	; 0x25
 800087e:	f000 f9c8 	bl	8000c12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000882:	2025      	movs	r0, #37	; 0x25
 8000884:	f000 f9df 	bl	8000c46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000888:	bf00      	nop
 800088a:	3768      	adds	r7, #104	; 0x68
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40013800 	.word	0x40013800
 8000894:	40021000 	.word	0x40021000
 8000898:	48000800 	.word	0x48000800

0800089c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008a0:	e7fe      	b.n	80008a0 <NMI_Handler+0x4>

080008a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a6:	e7fe      	b.n	80008a6 <HardFault_Handler+0x4>

080008a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008ac:	e7fe      	b.n	80008ac <MemManage_Handler+0x4>

080008ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b2:	e7fe      	b.n	80008b2 <BusFault_Handler+0x4>

080008b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b8:	e7fe      	b.n	80008b8 <UsageFault_Handler+0x4>

080008ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008be:	bf00      	nop
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr

080008c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr

080008d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr

080008e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008e8:	f000 f89a 	bl	8000a20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ec:	bf00      	nop
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80008f4:	4802      	ldr	r0, [pc, #8]	; (8000900 <USART1_IRQHandler+0x10>)
 80008f6:	f001 fc89 	bl	800220c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000028 	.word	0x20000028

08000904 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <SystemInit+0x20>)
 800090a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800090e:	4a05      	ldr	r2, [pc, #20]	; (8000924 <SystemInit+0x20>)
 8000910:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000914:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	e000ed00 	.word	0xe000ed00

08000928 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000928:	480d      	ldr	r0, [pc, #52]	; (8000960 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800092a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800092c:	f7ff ffea 	bl	8000904 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000930:	480c      	ldr	r0, [pc, #48]	; (8000964 <LoopForever+0x6>)
  ldr r1, =_edata
 8000932:	490d      	ldr	r1, [pc, #52]	; (8000968 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000934:	4a0d      	ldr	r2, [pc, #52]	; (800096c <LoopForever+0xe>)
  movs r3, #0
 8000936:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000938:	e002      	b.n	8000940 <LoopCopyDataInit>

0800093a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800093a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800093c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800093e:	3304      	adds	r3, #4

08000940 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000940:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000942:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000944:	d3f9      	bcc.n	800093a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000946:	4a0a      	ldr	r2, [pc, #40]	; (8000970 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000948:	4c0a      	ldr	r4, [pc, #40]	; (8000974 <LoopForever+0x16>)
  movs r3, #0
 800094a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800094c:	e001      	b.n	8000952 <LoopFillZerobss>

0800094e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800094e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000950:	3204      	adds	r2, #4

08000952 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000952:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000954:	d3fb      	bcc.n	800094e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000956:	f003 fc33 	bl	80041c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800095a:	f7ff fddb 	bl	8000514 <main>

0800095e <LoopForever>:

LoopForever:
    b LoopForever
 800095e:	e7fe      	b.n	800095e <LoopForever>
  ldr   r0, =_estack
 8000960:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000964:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000968:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800096c:	08004270 	.word	0x08004270
  ldr r2, =_sbss
 8000970:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000974:	200000c4 	.word	0x200000c4

08000978 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000978:	e7fe      	b.n	8000978 <ADC1_2_IRQHandler>

0800097a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	b082      	sub	sp, #8
 800097e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000980:	2300      	movs	r3, #0
 8000982:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000984:	2003      	movs	r0, #3
 8000986:	f000 f939 	bl	8000bfc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800098a:	2000      	movs	r0, #0
 800098c:	f000 f80e 	bl	80009ac <HAL_InitTick>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d002      	beq.n	800099c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000996:	2301      	movs	r3, #1
 8000998:	71fb      	strb	r3, [r7, #7]
 800099a:	e001      	b.n	80009a0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800099c:	f7ff fefa 	bl	8000794 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009a0:	79fb      	ldrb	r3, [r7, #7]

}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
	...

080009ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009b4:	2300      	movs	r3, #0
 80009b6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80009b8:	4b16      	ldr	r3, [pc, #88]	; (8000a14 <HAL_InitTick+0x68>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d022      	beq.n	8000a06 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80009c0:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <HAL_InitTick+0x6c>)
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	4b13      	ldr	r3, [pc, #76]	; (8000a14 <HAL_InitTick+0x68>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80009d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80009d4:	4618      	mov	r0, r3
 80009d6:	f000 f944 	bl	8000c62 <HAL_SYSTICK_Config>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d10f      	bne.n	8000a00 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2b0f      	cmp	r3, #15
 80009e4:	d809      	bhi.n	80009fa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009e6:	2200      	movs	r2, #0
 80009e8:	6879      	ldr	r1, [r7, #4]
 80009ea:	f04f 30ff 	mov.w	r0, #4294967295
 80009ee:	f000 f910 	bl	8000c12 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009f2:	4a0a      	ldr	r2, [pc, #40]	; (8000a1c <HAL_InitTick+0x70>)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	6013      	str	r3, [r2, #0]
 80009f8:	e007      	b.n	8000a0a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80009fa:	2301      	movs	r3, #1
 80009fc:	73fb      	strb	r3, [r7, #15]
 80009fe:	e004      	b.n	8000a0a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a00:	2301      	movs	r3, #1
 8000a02:	73fb      	strb	r3, [r7, #15]
 8000a04:	e001      	b.n	8000a0a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a06:	2301      	movs	r3, #1
 8000a08:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3710      	adds	r7, #16
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20000008 	.word	0x20000008
 8000a18:	20000000 	.word	0x20000000
 8000a1c:	20000004 	.word	0x20000004

08000a20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a24:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <HAL_IncTick+0x1c>)
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	4b05      	ldr	r3, [pc, #20]	; (8000a40 <HAL_IncTick+0x20>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	4a03      	ldr	r2, [pc, #12]	; (8000a3c <HAL_IncTick+0x1c>)
 8000a30:	6013      	str	r3, [r2, #0]
}
 8000a32:	bf00      	nop
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	200000c0 	.word	0x200000c0
 8000a40:	20000008 	.word	0x20000008

08000a44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  return uwTick;
 8000a48:	4b03      	ldr	r3, [pc, #12]	; (8000a58 <HAL_GetTick+0x14>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	200000c0 	.word	0x200000c0

08000a5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	f003 0307 	and.w	r3, r3, #7
 8000a6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a72:	68ba      	ldr	r2, [r7, #8]
 8000a74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a78:	4013      	ands	r3, r2
 8000a7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a8e:	4a04      	ldr	r2, [pc, #16]	; (8000aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	60d3      	str	r3, [r2, #12]
}
 8000a94:	bf00      	nop
 8000a96:	3714      	adds	r7, #20
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aa8:	4b04      	ldr	r3, [pc, #16]	; (8000abc <__NVIC_GetPriorityGrouping+0x18>)
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	0a1b      	lsrs	r3, r3, #8
 8000aae:	f003 0307 	and.w	r3, r3, #7
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	db0b      	blt.n	8000aea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	f003 021f 	and.w	r2, r3, #31
 8000ad8:	4907      	ldr	r1, [pc, #28]	; (8000af8 <__NVIC_EnableIRQ+0x38>)
 8000ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ade:	095b      	lsrs	r3, r3, #5
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000aea:	bf00      	nop
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	e000e100 	.word	0xe000e100

08000afc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	6039      	str	r1, [r7, #0]
 8000b06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	db0a      	blt.n	8000b26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	b2da      	uxtb	r2, r3
 8000b14:	490c      	ldr	r1, [pc, #48]	; (8000b48 <__NVIC_SetPriority+0x4c>)
 8000b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1a:	0112      	lsls	r2, r2, #4
 8000b1c:	b2d2      	uxtb	r2, r2
 8000b1e:	440b      	add	r3, r1
 8000b20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b24:	e00a      	b.n	8000b3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	b2da      	uxtb	r2, r3
 8000b2a:	4908      	ldr	r1, [pc, #32]	; (8000b4c <__NVIC_SetPriority+0x50>)
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	f003 030f 	and.w	r3, r3, #15
 8000b32:	3b04      	subs	r3, #4
 8000b34:	0112      	lsls	r2, r2, #4
 8000b36:	b2d2      	uxtb	r2, r2
 8000b38:	440b      	add	r3, r1
 8000b3a:	761a      	strb	r2, [r3, #24]
}
 8000b3c:	bf00      	nop
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	e000e100 	.word	0xe000e100
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b089      	sub	sp, #36	; 0x24
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	60f8      	str	r0, [r7, #12]
 8000b58:	60b9      	str	r1, [r7, #8]
 8000b5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	f003 0307 	and.w	r3, r3, #7
 8000b62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b64:	69fb      	ldr	r3, [r7, #28]
 8000b66:	f1c3 0307 	rsb	r3, r3, #7
 8000b6a:	2b04      	cmp	r3, #4
 8000b6c:	bf28      	it	cs
 8000b6e:	2304      	movcs	r3, #4
 8000b70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	3304      	adds	r3, #4
 8000b76:	2b06      	cmp	r3, #6
 8000b78:	d902      	bls.n	8000b80 <NVIC_EncodePriority+0x30>
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	3b03      	subs	r3, #3
 8000b7e:	e000      	b.n	8000b82 <NVIC_EncodePriority+0x32>
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b84:	f04f 32ff 	mov.w	r2, #4294967295
 8000b88:	69bb      	ldr	r3, [r7, #24]
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	43da      	mvns	r2, r3
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	401a      	ands	r2, r3
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b98:	f04f 31ff 	mov.w	r1, #4294967295
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba2:	43d9      	mvns	r1, r3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba8:	4313      	orrs	r3, r2
         );
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3724      	adds	r7, #36	; 0x24
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
	...

08000bb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bc8:	d301      	bcc.n	8000bce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e00f      	b.n	8000bee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bce:	4a0a      	ldr	r2, [pc, #40]	; (8000bf8 <SysTick_Config+0x40>)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bd6:	210f      	movs	r1, #15
 8000bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bdc:	f7ff ff8e 	bl	8000afc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000be0:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <SysTick_Config+0x40>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000be6:	4b04      	ldr	r3, [pc, #16]	; (8000bf8 <SysTick_Config+0x40>)
 8000be8:	2207      	movs	r2, #7
 8000bea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	e000e010 	.word	0xe000e010

08000bfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	f7ff ff29 	bl	8000a5c <__NVIC_SetPriorityGrouping>
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b086      	sub	sp, #24
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	4603      	mov	r3, r0
 8000c1a:	60b9      	str	r1, [r7, #8]
 8000c1c:	607a      	str	r2, [r7, #4]
 8000c1e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c20:	f7ff ff40 	bl	8000aa4 <__NVIC_GetPriorityGrouping>
 8000c24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c26:	687a      	ldr	r2, [r7, #4]
 8000c28:	68b9      	ldr	r1, [r7, #8]
 8000c2a:	6978      	ldr	r0, [r7, #20]
 8000c2c:	f7ff ff90 	bl	8000b50 <NVIC_EncodePriority>
 8000c30:	4602      	mov	r2, r0
 8000c32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c36:	4611      	mov	r1, r2
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff ff5f 	bl	8000afc <__NVIC_SetPriority>
}
 8000c3e:	bf00      	nop
 8000c40:	3718      	adds	r7, #24
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b082      	sub	sp, #8
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff ff33 	bl	8000ac0 <__NVIC_EnableIRQ>
}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b082      	sub	sp, #8
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f7ff ffa4 	bl	8000bb8 <SysTick_Config>
 8000c70:	4603      	mov	r3, r0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	b085      	sub	sp, #20
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c82:	2300      	movs	r3, #0
 8000c84:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	2b02      	cmp	r3, #2
 8000c90:	d005      	beq.n	8000c9e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2204      	movs	r2, #4
 8000c96:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	73fb      	strb	r3, [r7, #15]
 8000c9c:	e037      	b.n	8000d0e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f022 020e 	bic.w	r2, r2, #14
 8000cac:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000cbc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f022 0201 	bic.w	r2, r2, #1
 8000ccc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd2:	f003 021f 	and.w	r2, r3, #31
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cda:	2101      	movs	r1, #1
 8000cdc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ce0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce6:	687a      	ldr	r2, [r7, #4]
 8000ce8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000cea:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d00c      	beq.n	8000d0e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cfe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000d02:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d08:	687a      	ldr	r2, [r7, #4]
 8000d0a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000d0c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2201      	movs	r2, #1
 8000d12:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8000d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3714      	adds	r7, #20
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d34:	2300      	movs	r3, #0
 8000d36:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	2b02      	cmp	r3, #2
 8000d42:	d00d      	beq.n	8000d60 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2204      	movs	r2, #4
 8000d48:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2200      	movs	r2, #0
 8000d56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	73fb      	strb	r3, [r7, #15]
 8000d5e:	e047      	b.n	8000df0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f022 020e 	bic.w	r2, r2, #14
 8000d6e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f022 0201 	bic.w	r2, r2, #1
 8000d7e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000d8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d94:	f003 021f 	and.w	r2, r3, #31
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000da2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000dac:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d00c      	beq.n	8000dd0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000dc4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dca:	687a      	ldr	r2, [r7, #4]
 8000dcc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000dce:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d003      	beq.n	8000df0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	4798      	blx	r3
    }
  }
  return status;
 8000df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
	...

08000dfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b087      	sub	sp, #28
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e06:	2300      	movs	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000e0a:	e15a      	b.n	80010c2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	2101      	movs	r1, #1
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	fa01 f303 	lsl.w	r3, r1, r3
 8000e18:	4013      	ands	r3, r2
 8000e1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f000 814c 	beq.w	80010bc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f003 0303 	and.w	r3, r3, #3
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d005      	beq.n	8000e3c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	d130      	bne.n	8000e9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	2203      	movs	r2, #3
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	4013      	ands	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	68da      	ldr	r2, [r3, #12]
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e72:	2201      	movs	r2, #1
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	091b      	lsrs	r3, r3, #4
 8000e88:	f003 0201 	and.w	r2, r3, #1
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f003 0303 	and.w	r3, r3, #3
 8000ea6:	2b03      	cmp	r3, #3
 8000ea8:	d017      	beq.n	8000eda <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	68db      	ldr	r3, [r3, #12]
 8000eae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	2203      	movs	r2, #3
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	689a      	ldr	r2, [r3, #8]
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f003 0303 	and.w	r3, r3, #3
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d123      	bne.n	8000f2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	08da      	lsrs	r2, r3, #3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	3208      	adds	r2, #8
 8000eee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ef2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	220f      	movs	r2, #15
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	43db      	mvns	r3, r3
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	4013      	ands	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	691a      	ldr	r2, [r3, #16]
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	f003 0307 	and.w	r3, r3, #7
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	08da      	lsrs	r2, r3, #3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3208      	adds	r2, #8
 8000f28:	6939      	ldr	r1, [r7, #16]
 8000f2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	2203      	movs	r2, #3
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	4013      	ands	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f003 0203 	and.w	r2, r3, #3
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	f000 80a6 	beq.w	80010bc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f70:	4b5b      	ldr	r3, [pc, #364]	; (80010e0 <HAL_GPIO_Init+0x2e4>)
 8000f72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f74:	4a5a      	ldr	r2, [pc, #360]	; (80010e0 <HAL_GPIO_Init+0x2e4>)
 8000f76:	f043 0301 	orr.w	r3, r3, #1
 8000f7a:	6613      	str	r3, [r2, #96]	; 0x60
 8000f7c:	4b58      	ldr	r3, [pc, #352]	; (80010e0 <HAL_GPIO_Init+0x2e4>)
 8000f7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f80:	f003 0301 	and.w	r3, r3, #1
 8000f84:	60bb      	str	r3, [r7, #8]
 8000f86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f88:	4a56      	ldr	r2, [pc, #344]	; (80010e4 <HAL_GPIO_Init+0x2e8>)
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	089b      	lsrs	r3, r3, #2
 8000f8e:	3302      	adds	r3, #2
 8000f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	f003 0303 	and.w	r3, r3, #3
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	220f      	movs	r2, #15
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fb2:	d01f      	beq.n	8000ff4 <HAL_GPIO_Init+0x1f8>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	4a4c      	ldr	r2, [pc, #304]	; (80010e8 <HAL_GPIO_Init+0x2ec>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d019      	beq.n	8000ff0 <HAL_GPIO_Init+0x1f4>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4a4b      	ldr	r2, [pc, #300]	; (80010ec <HAL_GPIO_Init+0x2f0>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d013      	beq.n	8000fec <HAL_GPIO_Init+0x1f0>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4a4a      	ldr	r2, [pc, #296]	; (80010f0 <HAL_GPIO_Init+0x2f4>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d00d      	beq.n	8000fe8 <HAL_GPIO_Init+0x1ec>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4a49      	ldr	r2, [pc, #292]	; (80010f4 <HAL_GPIO_Init+0x2f8>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d007      	beq.n	8000fe4 <HAL_GPIO_Init+0x1e8>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4a48      	ldr	r2, [pc, #288]	; (80010f8 <HAL_GPIO_Init+0x2fc>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d101      	bne.n	8000fe0 <HAL_GPIO_Init+0x1e4>
 8000fdc:	2305      	movs	r3, #5
 8000fde:	e00a      	b.n	8000ff6 <HAL_GPIO_Init+0x1fa>
 8000fe0:	2306      	movs	r3, #6
 8000fe2:	e008      	b.n	8000ff6 <HAL_GPIO_Init+0x1fa>
 8000fe4:	2304      	movs	r3, #4
 8000fe6:	e006      	b.n	8000ff6 <HAL_GPIO_Init+0x1fa>
 8000fe8:	2303      	movs	r3, #3
 8000fea:	e004      	b.n	8000ff6 <HAL_GPIO_Init+0x1fa>
 8000fec:	2302      	movs	r3, #2
 8000fee:	e002      	b.n	8000ff6 <HAL_GPIO_Init+0x1fa>
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e000      	b.n	8000ff6 <HAL_GPIO_Init+0x1fa>
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	697a      	ldr	r2, [r7, #20]
 8000ff8:	f002 0203 	and.w	r2, r2, #3
 8000ffc:	0092      	lsls	r2, r2, #2
 8000ffe:	4093      	lsls	r3, r2
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	4313      	orrs	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001006:	4937      	ldr	r1, [pc, #220]	; (80010e4 <HAL_GPIO_Init+0x2e8>)
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	089b      	lsrs	r3, r3, #2
 800100c:	3302      	adds	r3, #2
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001014:	4b39      	ldr	r3, [pc, #228]	; (80010fc <HAL_GPIO_Init+0x300>)
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	43db      	mvns	r3, r3
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	4013      	ands	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800102c:	2b00      	cmp	r3, #0
 800102e:	d003      	beq.n	8001038 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	4313      	orrs	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001038:	4a30      	ldr	r2, [pc, #192]	; (80010fc <HAL_GPIO_Init+0x300>)
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800103e:	4b2f      	ldr	r3, [pc, #188]	; (80010fc <HAL_GPIO_Init+0x300>)
 8001040:	68db      	ldr	r3, [r3, #12]
 8001042:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	43db      	mvns	r3, r3
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	4013      	ands	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d003      	beq.n	8001062 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	4313      	orrs	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001062:	4a26      	ldr	r2, [pc, #152]	; (80010fc <HAL_GPIO_Init+0x300>)
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001068:	4b24      	ldr	r3, [pc, #144]	; (80010fc <HAL_GPIO_Init+0x300>)
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	43db      	mvns	r3, r3
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4013      	ands	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001080:	2b00      	cmp	r3, #0
 8001082:	d003      	beq.n	800108c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	4313      	orrs	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800108c:	4a1b      	ldr	r2, [pc, #108]	; (80010fc <HAL_GPIO_Init+0x300>)
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001092:	4b1a      	ldr	r3, [pc, #104]	; (80010fc <HAL_GPIO_Init+0x300>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	43db      	mvns	r3, r3
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	4013      	ands	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010b6:	4a11      	ldr	r2, [pc, #68]	; (80010fc <HAL_GPIO_Init+0x300>)
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	3301      	adds	r3, #1
 80010c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	fa22 f303 	lsr.w	r3, r2, r3
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	f47f ae9d 	bne.w	8000e0c <HAL_GPIO_Init+0x10>
  }
}
 80010d2:	bf00      	nop
 80010d4:	bf00      	nop
 80010d6:	371c      	adds	r7, #28
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	40021000 	.word	0x40021000
 80010e4:	40010000 	.word	0x40010000
 80010e8:	48000400 	.word	0x48000400
 80010ec:	48000800 	.word	0x48000800
 80010f0:	48000c00 	.word	0x48000c00
 80010f4:	48001000 	.word	0x48001000
 80010f8:	48001400 	.word	0x48001400
 80010fc:	40010400 	.word	0x40010400

08001100 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	460b      	mov	r3, r1
 800110a:	807b      	strh	r3, [r7, #2]
 800110c:	4613      	mov	r3, r2
 800110e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001110:	787b      	ldrb	r3, [r7, #1]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d003      	beq.n	800111e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001116:	887a      	ldrh	r2, [r7, #2]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800111c:	e002      	b.n	8001124 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800111e:	887a      	ldrh	r2, [r7, #2]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d141      	bne.n	80011c2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800113e:	4b4b      	ldr	r3, [pc, #300]	; (800126c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001146:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800114a:	d131      	bne.n	80011b0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800114c:	4b47      	ldr	r3, [pc, #284]	; (800126c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800114e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001152:	4a46      	ldr	r2, [pc, #280]	; (800126c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001154:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001158:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800115c:	4b43      	ldr	r3, [pc, #268]	; (800126c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001164:	4a41      	ldr	r2, [pc, #260]	; (800126c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001166:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800116a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800116c:	4b40      	ldr	r3, [pc, #256]	; (8001270 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2232      	movs	r2, #50	; 0x32
 8001172:	fb02 f303 	mul.w	r3, r2, r3
 8001176:	4a3f      	ldr	r2, [pc, #252]	; (8001274 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001178:	fba2 2303 	umull	r2, r3, r2, r3
 800117c:	0c9b      	lsrs	r3, r3, #18
 800117e:	3301      	adds	r3, #1
 8001180:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001182:	e002      	b.n	800118a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	3b01      	subs	r3, #1
 8001188:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800118a:	4b38      	ldr	r3, [pc, #224]	; (800126c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800118c:	695b      	ldr	r3, [r3, #20]
 800118e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001192:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001196:	d102      	bne.n	800119e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1f2      	bne.n	8001184 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800119e:	4b33      	ldr	r3, [pc, #204]	; (800126c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011a0:	695b      	ldr	r3, [r3, #20]
 80011a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011aa:	d158      	bne.n	800125e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80011ac:	2303      	movs	r3, #3
 80011ae:	e057      	b.n	8001260 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80011b0:	4b2e      	ldr	r3, [pc, #184]	; (800126c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80011b6:	4a2d      	ldr	r2, [pc, #180]	; (800126c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80011c0:	e04d      	b.n	800125e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011c8:	d141      	bne.n	800124e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80011ca:	4b28      	ldr	r3, [pc, #160]	; (800126c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011d6:	d131      	bne.n	800123c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80011d8:	4b24      	ldr	r3, [pc, #144]	; (800126c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80011de:	4a23      	ldr	r2, [pc, #140]	; (800126c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011e8:	4b20      	ldr	r3, [pc, #128]	; (800126c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011f0:	4a1e      	ldr	r2, [pc, #120]	; (800126c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011f8:	4b1d      	ldr	r3, [pc, #116]	; (8001270 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2232      	movs	r2, #50	; 0x32
 80011fe:	fb02 f303 	mul.w	r3, r2, r3
 8001202:	4a1c      	ldr	r2, [pc, #112]	; (8001274 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001204:	fba2 2303 	umull	r2, r3, r2, r3
 8001208:	0c9b      	lsrs	r3, r3, #18
 800120a:	3301      	adds	r3, #1
 800120c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800120e:	e002      	b.n	8001216 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	3b01      	subs	r3, #1
 8001214:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001216:	4b15      	ldr	r3, [pc, #84]	; (800126c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001218:	695b      	ldr	r3, [r3, #20]
 800121a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800121e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001222:	d102      	bne.n	800122a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d1f2      	bne.n	8001210 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800122a:	4b10      	ldr	r3, [pc, #64]	; (800126c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800122c:	695b      	ldr	r3, [r3, #20]
 800122e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001232:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001236:	d112      	bne.n	800125e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001238:	2303      	movs	r3, #3
 800123a:	e011      	b.n	8001260 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800123c:	4b0b      	ldr	r3, [pc, #44]	; (800126c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800123e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001242:	4a0a      	ldr	r2, [pc, #40]	; (800126c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001248:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800124c:	e007      	b.n	800125e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800124e:	4b07      	ldr	r3, [pc, #28]	; (800126c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001256:	4a05      	ldr	r2, [pc, #20]	; (800126c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001258:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800125c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800125e:	2300      	movs	r3, #0
}
 8001260:	4618      	mov	r0, r3
 8001262:	3714      	adds	r7, #20
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	40007000 	.word	0x40007000
 8001270:	20000000 	.word	0x20000000
 8001274:	431bde83 	.word	0x431bde83

08001278 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800127c:	4b05      	ldr	r3, [pc, #20]	; (8001294 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	4a04      	ldr	r2, [pc, #16]	; (8001294 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001282:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001286:	6093      	str	r3, [r2, #8]
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	40007000 	.word	0x40007000

08001298 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b088      	sub	sp, #32
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d101      	bne.n	80012aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e2fe      	b.n	80018a8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d075      	beq.n	80013a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012b6:	4b97      	ldr	r3, [pc, #604]	; (8001514 <HAL_RCC_OscConfig+0x27c>)
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	f003 030c 	and.w	r3, r3, #12
 80012be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012c0:	4b94      	ldr	r3, [pc, #592]	; (8001514 <HAL_RCC_OscConfig+0x27c>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	f003 0303 	and.w	r3, r3, #3
 80012c8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	2b0c      	cmp	r3, #12
 80012ce:	d102      	bne.n	80012d6 <HAL_RCC_OscConfig+0x3e>
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	2b03      	cmp	r3, #3
 80012d4:	d002      	beq.n	80012dc <HAL_RCC_OscConfig+0x44>
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	2b08      	cmp	r3, #8
 80012da:	d10b      	bne.n	80012f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012dc:	4b8d      	ldr	r3, [pc, #564]	; (8001514 <HAL_RCC_OscConfig+0x27c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d05b      	beq.n	80013a0 <HAL_RCC_OscConfig+0x108>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d157      	bne.n	80013a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e2d9      	b.n	80018a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012fc:	d106      	bne.n	800130c <HAL_RCC_OscConfig+0x74>
 80012fe:	4b85      	ldr	r3, [pc, #532]	; (8001514 <HAL_RCC_OscConfig+0x27c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a84      	ldr	r2, [pc, #528]	; (8001514 <HAL_RCC_OscConfig+0x27c>)
 8001304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001308:	6013      	str	r3, [r2, #0]
 800130a:	e01d      	b.n	8001348 <HAL_RCC_OscConfig+0xb0>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001314:	d10c      	bne.n	8001330 <HAL_RCC_OscConfig+0x98>
 8001316:	4b7f      	ldr	r3, [pc, #508]	; (8001514 <HAL_RCC_OscConfig+0x27c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a7e      	ldr	r2, [pc, #504]	; (8001514 <HAL_RCC_OscConfig+0x27c>)
 800131c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001320:	6013      	str	r3, [r2, #0]
 8001322:	4b7c      	ldr	r3, [pc, #496]	; (8001514 <HAL_RCC_OscConfig+0x27c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a7b      	ldr	r2, [pc, #492]	; (8001514 <HAL_RCC_OscConfig+0x27c>)
 8001328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800132c:	6013      	str	r3, [r2, #0]
 800132e:	e00b      	b.n	8001348 <HAL_RCC_OscConfig+0xb0>
 8001330:	4b78      	ldr	r3, [pc, #480]	; (8001514 <HAL_RCC_OscConfig+0x27c>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a77      	ldr	r2, [pc, #476]	; (8001514 <HAL_RCC_OscConfig+0x27c>)
 8001336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800133a:	6013      	str	r3, [r2, #0]
 800133c:	4b75      	ldr	r3, [pc, #468]	; (8001514 <HAL_RCC_OscConfig+0x27c>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a74      	ldr	r2, [pc, #464]	; (8001514 <HAL_RCC_OscConfig+0x27c>)
 8001342:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001346:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d013      	beq.n	8001378 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001350:	f7ff fb78 	bl	8000a44 <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001358:	f7ff fb74 	bl	8000a44 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b64      	cmp	r3, #100	; 0x64
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e29e      	b.n	80018a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800136a:	4b6a      	ldr	r3, [pc, #424]	; (8001514 <HAL_RCC_OscConfig+0x27c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d0f0      	beq.n	8001358 <HAL_RCC_OscConfig+0xc0>
 8001376:	e014      	b.n	80013a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001378:	f7ff fb64 	bl	8000a44 <HAL_GetTick>
 800137c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800137e:	e008      	b.n	8001392 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001380:	f7ff fb60 	bl	8000a44 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b64      	cmp	r3, #100	; 0x64
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e28a      	b.n	80018a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001392:	4b60      	ldr	r3, [pc, #384]	; (8001514 <HAL_RCC_OscConfig+0x27c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d1f0      	bne.n	8001380 <HAL_RCC_OscConfig+0xe8>
 800139e:	e000      	b.n	80013a2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d075      	beq.n	800149a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013ae:	4b59      	ldr	r3, [pc, #356]	; (8001514 <HAL_RCC_OscConfig+0x27c>)
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	f003 030c 	and.w	r3, r3, #12
 80013b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013b8:	4b56      	ldr	r3, [pc, #344]	; (8001514 <HAL_RCC_OscConfig+0x27c>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	f003 0303 	and.w	r3, r3, #3
 80013c0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	2b0c      	cmp	r3, #12
 80013c6:	d102      	bne.n	80013ce <HAL_RCC_OscConfig+0x136>
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d002      	beq.n	80013d4 <HAL_RCC_OscConfig+0x13c>
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	2b04      	cmp	r3, #4
 80013d2:	d11f      	bne.n	8001414 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013d4:	4b4f      	ldr	r3, [pc, #316]	; (8001514 <HAL_RCC_OscConfig+0x27c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d005      	beq.n	80013ec <HAL_RCC_OscConfig+0x154>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d101      	bne.n	80013ec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	e25d      	b.n	80018a8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ec:	4b49      	ldr	r3, [pc, #292]	; (8001514 <HAL_RCC_OscConfig+0x27c>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	691b      	ldr	r3, [r3, #16]
 80013f8:	061b      	lsls	r3, r3, #24
 80013fa:	4946      	ldr	r1, [pc, #280]	; (8001514 <HAL_RCC_OscConfig+0x27c>)
 80013fc:	4313      	orrs	r3, r2
 80013fe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001400:	4b45      	ldr	r3, [pc, #276]	; (8001518 <HAL_RCC_OscConfig+0x280>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff fad1 	bl	80009ac <HAL_InitTick>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d043      	beq.n	8001498 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e249      	b.n	80018a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d023      	beq.n	8001464 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800141c:	4b3d      	ldr	r3, [pc, #244]	; (8001514 <HAL_RCC_OscConfig+0x27c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a3c      	ldr	r2, [pc, #240]	; (8001514 <HAL_RCC_OscConfig+0x27c>)
 8001422:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001426:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001428:	f7ff fb0c 	bl	8000a44 <HAL_GetTick>
 800142c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800142e:	e008      	b.n	8001442 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001430:	f7ff fb08 	bl	8000a44 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b02      	cmp	r3, #2
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e232      	b.n	80018a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001442:	4b34      	ldr	r3, [pc, #208]	; (8001514 <HAL_RCC_OscConfig+0x27c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800144a:	2b00      	cmp	r3, #0
 800144c:	d0f0      	beq.n	8001430 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800144e:	4b31      	ldr	r3, [pc, #196]	; (8001514 <HAL_RCC_OscConfig+0x27c>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	691b      	ldr	r3, [r3, #16]
 800145a:	061b      	lsls	r3, r3, #24
 800145c:	492d      	ldr	r1, [pc, #180]	; (8001514 <HAL_RCC_OscConfig+0x27c>)
 800145e:	4313      	orrs	r3, r2
 8001460:	604b      	str	r3, [r1, #4]
 8001462:	e01a      	b.n	800149a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001464:	4b2b      	ldr	r3, [pc, #172]	; (8001514 <HAL_RCC_OscConfig+0x27c>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a2a      	ldr	r2, [pc, #168]	; (8001514 <HAL_RCC_OscConfig+0x27c>)
 800146a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800146e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001470:	f7ff fae8 	bl	8000a44 <HAL_GetTick>
 8001474:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001476:	e008      	b.n	800148a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001478:	f7ff fae4 	bl	8000a44 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b02      	cmp	r3, #2
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e20e      	b.n	80018a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800148a:	4b22      	ldr	r3, [pc, #136]	; (8001514 <HAL_RCC_OscConfig+0x27c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1f0      	bne.n	8001478 <HAL_RCC_OscConfig+0x1e0>
 8001496:	e000      	b.n	800149a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001498:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0308 	and.w	r3, r3, #8
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d041      	beq.n	800152a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	695b      	ldr	r3, [r3, #20]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d01c      	beq.n	80014e8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014ae:	4b19      	ldr	r3, [pc, #100]	; (8001514 <HAL_RCC_OscConfig+0x27c>)
 80014b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014b4:	4a17      	ldr	r2, [pc, #92]	; (8001514 <HAL_RCC_OscConfig+0x27c>)
 80014b6:	f043 0301 	orr.w	r3, r3, #1
 80014ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014be:	f7ff fac1 	bl	8000a44 <HAL_GetTick>
 80014c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014c4:	e008      	b.n	80014d8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014c6:	f7ff fabd 	bl	8000a44 <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d901      	bls.n	80014d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e1e7      	b.n	80018a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014d8:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <HAL_RCC_OscConfig+0x27c>)
 80014da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d0ef      	beq.n	80014c6 <HAL_RCC_OscConfig+0x22e>
 80014e6:	e020      	b.n	800152a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014e8:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <HAL_RCC_OscConfig+0x27c>)
 80014ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014ee:	4a09      	ldr	r2, [pc, #36]	; (8001514 <HAL_RCC_OscConfig+0x27c>)
 80014f0:	f023 0301 	bic.w	r3, r3, #1
 80014f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014f8:	f7ff faa4 	bl	8000a44 <HAL_GetTick>
 80014fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014fe:	e00d      	b.n	800151c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001500:	f7ff faa0 	bl	8000a44 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b02      	cmp	r3, #2
 800150c:	d906      	bls.n	800151c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e1ca      	b.n	80018a8 <HAL_RCC_OscConfig+0x610>
 8001512:	bf00      	nop
 8001514:	40021000 	.word	0x40021000
 8001518:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800151c:	4b8c      	ldr	r3, [pc, #560]	; (8001750 <HAL_RCC_OscConfig+0x4b8>)
 800151e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d1ea      	bne.n	8001500 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0304 	and.w	r3, r3, #4
 8001532:	2b00      	cmp	r3, #0
 8001534:	f000 80a6 	beq.w	8001684 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001538:	2300      	movs	r3, #0
 800153a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800153c:	4b84      	ldr	r3, [pc, #528]	; (8001750 <HAL_RCC_OscConfig+0x4b8>)
 800153e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d101      	bne.n	800154c <HAL_RCC_OscConfig+0x2b4>
 8001548:	2301      	movs	r3, #1
 800154a:	e000      	b.n	800154e <HAL_RCC_OscConfig+0x2b6>
 800154c:	2300      	movs	r3, #0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d00d      	beq.n	800156e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001552:	4b7f      	ldr	r3, [pc, #508]	; (8001750 <HAL_RCC_OscConfig+0x4b8>)
 8001554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001556:	4a7e      	ldr	r2, [pc, #504]	; (8001750 <HAL_RCC_OscConfig+0x4b8>)
 8001558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800155c:	6593      	str	r3, [r2, #88]	; 0x58
 800155e:	4b7c      	ldr	r3, [pc, #496]	; (8001750 <HAL_RCC_OscConfig+0x4b8>)
 8001560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800156a:	2301      	movs	r3, #1
 800156c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800156e:	4b79      	ldr	r3, [pc, #484]	; (8001754 <HAL_RCC_OscConfig+0x4bc>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001576:	2b00      	cmp	r3, #0
 8001578:	d118      	bne.n	80015ac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800157a:	4b76      	ldr	r3, [pc, #472]	; (8001754 <HAL_RCC_OscConfig+0x4bc>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a75      	ldr	r2, [pc, #468]	; (8001754 <HAL_RCC_OscConfig+0x4bc>)
 8001580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001584:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001586:	f7ff fa5d 	bl	8000a44 <HAL_GetTick>
 800158a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800158c:	e008      	b.n	80015a0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800158e:	f7ff fa59 	bl	8000a44 <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	2b02      	cmp	r3, #2
 800159a:	d901      	bls.n	80015a0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e183      	b.n	80018a8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015a0:	4b6c      	ldr	r3, [pc, #432]	; (8001754 <HAL_RCC_OscConfig+0x4bc>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d0f0      	beq.n	800158e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d108      	bne.n	80015c6 <HAL_RCC_OscConfig+0x32e>
 80015b4:	4b66      	ldr	r3, [pc, #408]	; (8001750 <HAL_RCC_OscConfig+0x4b8>)
 80015b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015ba:	4a65      	ldr	r2, [pc, #404]	; (8001750 <HAL_RCC_OscConfig+0x4b8>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015c4:	e024      	b.n	8001610 <HAL_RCC_OscConfig+0x378>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	2b05      	cmp	r3, #5
 80015cc:	d110      	bne.n	80015f0 <HAL_RCC_OscConfig+0x358>
 80015ce:	4b60      	ldr	r3, [pc, #384]	; (8001750 <HAL_RCC_OscConfig+0x4b8>)
 80015d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015d4:	4a5e      	ldr	r2, [pc, #376]	; (8001750 <HAL_RCC_OscConfig+0x4b8>)
 80015d6:	f043 0304 	orr.w	r3, r3, #4
 80015da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015de:	4b5c      	ldr	r3, [pc, #368]	; (8001750 <HAL_RCC_OscConfig+0x4b8>)
 80015e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015e4:	4a5a      	ldr	r2, [pc, #360]	; (8001750 <HAL_RCC_OscConfig+0x4b8>)
 80015e6:	f043 0301 	orr.w	r3, r3, #1
 80015ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015ee:	e00f      	b.n	8001610 <HAL_RCC_OscConfig+0x378>
 80015f0:	4b57      	ldr	r3, [pc, #348]	; (8001750 <HAL_RCC_OscConfig+0x4b8>)
 80015f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015f6:	4a56      	ldr	r2, [pc, #344]	; (8001750 <HAL_RCC_OscConfig+0x4b8>)
 80015f8:	f023 0301 	bic.w	r3, r3, #1
 80015fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001600:	4b53      	ldr	r3, [pc, #332]	; (8001750 <HAL_RCC_OscConfig+0x4b8>)
 8001602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001606:	4a52      	ldr	r2, [pc, #328]	; (8001750 <HAL_RCC_OscConfig+0x4b8>)
 8001608:	f023 0304 	bic.w	r3, r3, #4
 800160c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d016      	beq.n	8001646 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001618:	f7ff fa14 	bl	8000a44 <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800161e:	e00a      	b.n	8001636 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001620:	f7ff fa10 	bl	8000a44 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	f241 3288 	movw	r2, #5000	; 0x1388
 800162e:	4293      	cmp	r3, r2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e138      	b.n	80018a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001636:	4b46      	ldr	r3, [pc, #280]	; (8001750 <HAL_RCC_OscConfig+0x4b8>)
 8001638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d0ed      	beq.n	8001620 <HAL_RCC_OscConfig+0x388>
 8001644:	e015      	b.n	8001672 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001646:	f7ff f9fd 	bl	8000a44 <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800164c:	e00a      	b.n	8001664 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800164e:	f7ff f9f9 	bl	8000a44 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	f241 3288 	movw	r2, #5000	; 0x1388
 800165c:	4293      	cmp	r3, r2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e121      	b.n	80018a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001664:	4b3a      	ldr	r3, [pc, #232]	; (8001750 <HAL_RCC_OscConfig+0x4b8>)
 8001666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1ed      	bne.n	800164e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001672:	7ffb      	ldrb	r3, [r7, #31]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d105      	bne.n	8001684 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001678:	4b35      	ldr	r3, [pc, #212]	; (8001750 <HAL_RCC_OscConfig+0x4b8>)
 800167a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800167c:	4a34      	ldr	r2, [pc, #208]	; (8001750 <HAL_RCC_OscConfig+0x4b8>)
 800167e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001682:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0320 	and.w	r3, r3, #32
 800168c:	2b00      	cmp	r3, #0
 800168e:	d03c      	beq.n	800170a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d01c      	beq.n	80016d2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001698:	4b2d      	ldr	r3, [pc, #180]	; (8001750 <HAL_RCC_OscConfig+0x4b8>)
 800169a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800169e:	4a2c      	ldr	r2, [pc, #176]	; (8001750 <HAL_RCC_OscConfig+0x4b8>)
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016a8:	f7ff f9cc 	bl	8000a44 <HAL_GetTick>
 80016ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80016ae:	e008      	b.n	80016c2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016b0:	f7ff f9c8 	bl	8000a44 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e0f2      	b.n	80018a8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80016c2:	4b23      	ldr	r3, [pc, #140]	; (8001750 <HAL_RCC_OscConfig+0x4b8>)
 80016c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016c8:	f003 0302 	and.w	r3, r3, #2
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d0ef      	beq.n	80016b0 <HAL_RCC_OscConfig+0x418>
 80016d0:	e01b      	b.n	800170a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80016d2:	4b1f      	ldr	r3, [pc, #124]	; (8001750 <HAL_RCC_OscConfig+0x4b8>)
 80016d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016d8:	4a1d      	ldr	r2, [pc, #116]	; (8001750 <HAL_RCC_OscConfig+0x4b8>)
 80016da:	f023 0301 	bic.w	r3, r3, #1
 80016de:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016e2:	f7ff f9af 	bl	8000a44 <HAL_GetTick>
 80016e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80016e8:	e008      	b.n	80016fc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016ea:	f7ff f9ab 	bl	8000a44 <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e0d5      	b.n	80018a8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80016fc:	4b14      	ldr	r3, [pc, #80]	; (8001750 <HAL_RCC_OscConfig+0x4b8>)
 80016fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1ef      	bne.n	80016ea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	69db      	ldr	r3, [r3, #28]
 800170e:	2b00      	cmp	r3, #0
 8001710:	f000 80c9 	beq.w	80018a6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001714:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <HAL_RCC_OscConfig+0x4b8>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f003 030c 	and.w	r3, r3, #12
 800171c:	2b0c      	cmp	r3, #12
 800171e:	f000 8083 	beq.w	8001828 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	69db      	ldr	r3, [r3, #28]
 8001726:	2b02      	cmp	r3, #2
 8001728:	d15e      	bne.n	80017e8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800172a:	4b09      	ldr	r3, [pc, #36]	; (8001750 <HAL_RCC_OscConfig+0x4b8>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a08      	ldr	r2, [pc, #32]	; (8001750 <HAL_RCC_OscConfig+0x4b8>)
 8001730:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001734:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001736:	f7ff f985 	bl	8000a44 <HAL_GetTick>
 800173a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800173c:	e00c      	b.n	8001758 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800173e:	f7ff f981 	bl	8000a44 <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	2b02      	cmp	r3, #2
 800174a:	d905      	bls.n	8001758 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e0ab      	b.n	80018a8 <HAL_RCC_OscConfig+0x610>
 8001750:	40021000 	.word	0x40021000
 8001754:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001758:	4b55      	ldr	r3, [pc, #340]	; (80018b0 <HAL_RCC_OscConfig+0x618>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d1ec      	bne.n	800173e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001764:	4b52      	ldr	r3, [pc, #328]	; (80018b0 <HAL_RCC_OscConfig+0x618>)
 8001766:	68da      	ldr	r2, [r3, #12]
 8001768:	4b52      	ldr	r3, [pc, #328]	; (80018b4 <HAL_RCC_OscConfig+0x61c>)
 800176a:	4013      	ands	r3, r2
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	6a11      	ldr	r1, [r2, #32]
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001774:	3a01      	subs	r2, #1
 8001776:	0112      	lsls	r2, r2, #4
 8001778:	4311      	orrs	r1, r2
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800177e:	0212      	lsls	r2, r2, #8
 8001780:	4311      	orrs	r1, r2
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001786:	0852      	lsrs	r2, r2, #1
 8001788:	3a01      	subs	r2, #1
 800178a:	0552      	lsls	r2, r2, #21
 800178c:	4311      	orrs	r1, r2
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001792:	0852      	lsrs	r2, r2, #1
 8001794:	3a01      	subs	r2, #1
 8001796:	0652      	lsls	r2, r2, #25
 8001798:	4311      	orrs	r1, r2
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800179e:	06d2      	lsls	r2, r2, #27
 80017a0:	430a      	orrs	r2, r1
 80017a2:	4943      	ldr	r1, [pc, #268]	; (80018b0 <HAL_RCC_OscConfig+0x618>)
 80017a4:	4313      	orrs	r3, r2
 80017a6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017a8:	4b41      	ldr	r3, [pc, #260]	; (80018b0 <HAL_RCC_OscConfig+0x618>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a40      	ldr	r2, [pc, #256]	; (80018b0 <HAL_RCC_OscConfig+0x618>)
 80017ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017b2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017b4:	4b3e      	ldr	r3, [pc, #248]	; (80018b0 <HAL_RCC_OscConfig+0x618>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	4a3d      	ldr	r2, [pc, #244]	; (80018b0 <HAL_RCC_OscConfig+0x618>)
 80017ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c0:	f7ff f940 	bl	8000a44 <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017c8:	f7ff f93c 	bl	8000a44 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e066      	b.n	80018a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017da:	4b35      	ldr	r3, [pc, #212]	; (80018b0 <HAL_RCC_OscConfig+0x618>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d0f0      	beq.n	80017c8 <HAL_RCC_OscConfig+0x530>
 80017e6:	e05e      	b.n	80018a6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e8:	4b31      	ldr	r3, [pc, #196]	; (80018b0 <HAL_RCC_OscConfig+0x618>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a30      	ldr	r2, [pc, #192]	; (80018b0 <HAL_RCC_OscConfig+0x618>)
 80017ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f4:	f7ff f926 	bl	8000a44 <HAL_GetTick>
 80017f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017fc:	f7ff f922 	bl	8000a44 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e04c      	b.n	80018a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800180e:	4b28      	ldr	r3, [pc, #160]	; (80018b0 <HAL_RCC_OscConfig+0x618>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1f0      	bne.n	80017fc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800181a:	4b25      	ldr	r3, [pc, #148]	; (80018b0 <HAL_RCC_OscConfig+0x618>)
 800181c:	68da      	ldr	r2, [r3, #12]
 800181e:	4924      	ldr	r1, [pc, #144]	; (80018b0 <HAL_RCC_OscConfig+0x618>)
 8001820:	4b25      	ldr	r3, [pc, #148]	; (80018b8 <HAL_RCC_OscConfig+0x620>)
 8001822:	4013      	ands	r3, r2
 8001824:	60cb      	str	r3, [r1, #12]
 8001826:	e03e      	b.n	80018a6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	69db      	ldr	r3, [r3, #28]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d101      	bne.n	8001834 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e039      	b.n	80018a8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001834:	4b1e      	ldr	r3, [pc, #120]	; (80018b0 <HAL_RCC_OscConfig+0x618>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	f003 0203 	and.w	r2, r3, #3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a1b      	ldr	r3, [r3, #32]
 8001844:	429a      	cmp	r2, r3
 8001846:	d12c      	bne.n	80018a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001852:	3b01      	subs	r3, #1
 8001854:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001856:	429a      	cmp	r2, r3
 8001858:	d123      	bne.n	80018a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001864:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001866:	429a      	cmp	r2, r3
 8001868:	d11b      	bne.n	80018a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001874:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001876:	429a      	cmp	r2, r3
 8001878:	d113      	bne.n	80018a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001884:	085b      	lsrs	r3, r3, #1
 8001886:	3b01      	subs	r3, #1
 8001888:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800188a:	429a      	cmp	r2, r3
 800188c:	d109      	bne.n	80018a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001898:	085b      	lsrs	r3, r3, #1
 800189a:	3b01      	subs	r3, #1
 800189c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800189e:	429a      	cmp	r2, r3
 80018a0:	d001      	beq.n	80018a6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e000      	b.n	80018a8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3720      	adds	r7, #32
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40021000 	.word	0x40021000
 80018b4:	019f800c 	.word	0x019f800c
 80018b8:	feeefffc 	.word	0xfeeefffc

080018bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80018c6:	2300      	movs	r3, #0
 80018c8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d101      	bne.n	80018d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e11e      	b.n	8001b12 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018d4:	4b91      	ldr	r3, [pc, #580]	; (8001b1c <HAL_RCC_ClockConfig+0x260>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 030f 	and.w	r3, r3, #15
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d910      	bls.n	8001904 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018e2:	4b8e      	ldr	r3, [pc, #568]	; (8001b1c <HAL_RCC_ClockConfig+0x260>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f023 020f 	bic.w	r2, r3, #15
 80018ea:	498c      	ldr	r1, [pc, #560]	; (8001b1c <HAL_RCC_ClockConfig+0x260>)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018f2:	4b8a      	ldr	r3, [pc, #552]	; (8001b1c <HAL_RCC_ClockConfig+0x260>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 030f 	and.w	r3, r3, #15
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d001      	beq.n	8001904 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e106      	b.n	8001b12 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0301 	and.w	r3, r3, #1
 800190c:	2b00      	cmp	r3, #0
 800190e:	d073      	beq.n	80019f8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	2b03      	cmp	r3, #3
 8001916:	d129      	bne.n	800196c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001918:	4b81      	ldr	r3, [pc, #516]	; (8001b20 <HAL_RCC_ClockConfig+0x264>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d101      	bne.n	8001928 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e0f4      	b.n	8001b12 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001928:	f000 f99e 	bl	8001c68 <RCC_GetSysClockFreqFromPLLSource>
 800192c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	4a7c      	ldr	r2, [pc, #496]	; (8001b24 <HAL_RCC_ClockConfig+0x268>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d93f      	bls.n	80019b6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001936:	4b7a      	ldr	r3, [pc, #488]	; (8001b20 <HAL_RCC_ClockConfig+0x264>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d009      	beq.n	8001956 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800194a:	2b00      	cmp	r3, #0
 800194c:	d033      	beq.n	80019b6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001952:	2b00      	cmp	r3, #0
 8001954:	d12f      	bne.n	80019b6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001956:	4b72      	ldr	r3, [pc, #456]	; (8001b20 <HAL_RCC_ClockConfig+0x264>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800195e:	4a70      	ldr	r2, [pc, #448]	; (8001b20 <HAL_RCC_ClockConfig+0x264>)
 8001960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001964:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001966:	2380      	movs	r3, #128	; 0x80
 8001968:	617b      	str	r3, [r7, #20]
 800196a:	e024      	b.n	80019b6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	2b02      	cmp	r3, #2
 8001972:	d107      	bne.n	8001984 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001974:	4b6a      	ldr	r3, [pc, #424]	; (8001b20 <HAL_RCC_ClockConfig+0x264>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d109      	bne.n	8001994 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e0c6      	b.n	8001b12 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001984:	4b66      	ldr	r3, [pc, #408]	; (8001b20 <HAL_RCC_ClockConfig+0x264>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800198c:	2b00      	cmp	r3, #0
 800198e:	d101      	bne.n	8001994 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e0be      	b.n	8001b12 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001994:	f000 f8ce 	bl	8001b34 <HAL_RCC_GetSysClockFreq>
 8001998:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	4a61      	ldr	r2, [pc, #388]	; (8001b24 <HAL_RCC_ClockConfig+0x268>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d909      	bls.n	80019b6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80019a2:	4b5f      	ldr	r3, [pc, #380]	; (8001b20 <HAL_RCC_ClockConfig+0x264>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019aa:	4a5d      	ldr	r2, [pc, #372]	; (8001b20 <HAL_RCC_ClockConfig+0x264>)
 80019ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019b0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80019b2:	2380      	movs	r3, #128	; 0x80
 80019b4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019b6:	4b5a      	ldr	r3, [pc, #360]	; (8001b20 <HAL_RCC_ClockConfig+0x264>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f023 0203 	bic.w	r2, r3, #3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	4957      	ldr	r1, [pc, #348]	; (8001b20 <HAL_RCC_ClockConfig+0x264>)
 80019c4:	4313      	orrs	r3, r2
 80019c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019c8:	f7ff f83c 	bl	8000a44 <HAL_GetTick>
 80019cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ce:	e00a      	b.n	80019e6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019d0:	f7ff f838 	bl	8000a44 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	f241 3288 	movw	r2, #5000	; 0x1388
 80019de:	4293      	cmp	r3, r2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e095      	b.n	8001b12 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019e6:	4b4e      	ldr	r3, [pc, #312]	; (8001b20 <HAL_RCC_ClockConfig+0x264>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f003 020c 	and.w	r2, r3, #12
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d1eb      	bne.n	80019d0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0302 	and.w	r3, r3, #2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d023      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0304 	and.w	r3, r3, #4
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d005      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a10:	4b43      	ldr	r3, [pc, #268]	; (8001b20 <HAL_RCC_ClockConfig+0x264>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	4a42      	ldr	r2, [pc, #264]	; (8001b20 <HAL_RCC_ClockConfig+0x264>)
 8001a16:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a1a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0308 	and.w	r3, r3, #8
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d007      	beq.n	8001a38 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001a28:	4b3d      	ldr	r3, [pc, #244]	; (8001b20 <HAL_RCC_ClockConfig+0x264>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001a30:	4a3b      	ldr	r2, [pc, #236]	; (8001b20 <HAL_RCC_ClockConfig+0x264>)
 8001a32:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a36:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a38:	4b39      	ldr	r3, [pc, #228]	; (8001b20 <HAL_RCC_ClockConfig+0x264>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	4936      	ldr	r1, [pc, #216]	; (8001b20 <HAL_RCC_ClockConfig+0x264>)
 8001a46:	4313      	orrs	r3, r2
 8001a48:	608b      	str	r3, [r1, #8]
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	2b80      	cmp	r3, #128	; 0x80
 8001a50:	d105      	bne.n	8001a5e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001a52:	4b33      	ldr	r3, [pc, #204]	; (8001b20 <HAL_RCC_ClockConfig+0x264>)
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	4a32      	ldr	r2, [pc, #200]	; (8001b20 <HAL_RCC_ClockConfig+0x264>)
 8001a58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a5c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a5e:	4b2f      	ldr	r3, [pc, #188]	; (8001b1c <HAL_RCC_ClockConfig+0x260>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 030f 	and.w	r3, r3, #15
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d21d      	bcs.n	8001aa8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a6c:	4b2b      	ldr	r3, [pc, #172]	; (8001b1c <HAL_RCC_ClockConfig+0x260>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f023 020f 	bic.w	r2, r3, #15
 8001a74:	4929      	ldr	r1, [pc, #164]	; (8001b1c <HAL_RCC_ClockConfig+0x260>)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a7c:	f7fe ffe2 	bl	8000a44 <HAL_GetTick>
 8001a80:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a82:	e00a      	b.n	8001a9a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a84:	f7fe ffde 	bl	8000a44 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e03b      	b.n	8001b12 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a9a:	4b20      	ldr	r3, [pc, #128]	; (8001b1c <HAL_RCC_ClockConfig+0x260>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 030f 	and.w	r3, r3, #15
 8001aa2:	683a      	ldr	r2, [r7, #0]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d1ed      	bne.n	8001a84 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0304 	and.w	r3, r3, #4
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d008      	beq.n	8001ac6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ab4:	4b1a      	ldr	r3, [pc, #104]	; (8001b20 <HAL_RCC_ClockConfig+0x264>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	4917      	ldr	r1, [pc, #92]	; (8001b20 <HAL_RCC_ClockConfig+0x264>)
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0308 	and.w	r3, r3, #8
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d009      	beq.n	8001ae6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ad2:	4b13      	ldr	r3, [pc, #76]	; (8001b20 <HAL_RCC_ClockConfig+0x264>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	490f      	ldr	r1, [pc, #60]	; (8001b20 <HAL_RCC_ClockConfig+0x264>)
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ae6:	f000 f825 	bl	8001b34 <HAL_RCC_GetSysClockFreq>
 8001aea:	4602      	mov	r2, r0
 8001aec:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <HAL_RCC_ClockConfig+0x264>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	091b      	lsrs	r3, r3, #4
 8001af2:	f003 030f 	and.w	r3, r3, #15
 8001af6:	490c      	ldr	r1, [pc, #48]	; (8001b28 <HAL_RCC_ClockConfig+0x26c>)
 8001af8:	5ccb      	ldrb	r3, [r1, r3]
 8001afa:	f003 031f 	and.w	r3, r3, #31
 8001afe:	fa22 f303 	lsr.w	r3, r2, r3
 8001b02:	4a0a      	ldr	r2, [pc, #40]	; (8001b2c <HAL_RCC_ClockConfig+0x270>)
 8001b04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001b06:	4b0a      	ldr	r3, [pc, #40]	; (8001b30 <HAL_RCC_ClockConfig+0x274>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7fe ff4e 	bl	80009ac <HAL_InitTick>
 8001b10:	4603      	mov	r3, r0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3718      	adds	r7, #24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40022000 	.word	0x40022000
 8001b20:	40021000 	.word	0x40021000
 8001b24:	04c4b400 	.word	0x04c4b400
 8001b28:	08004220 	.word	0x08004220
 8001b2c:	20000000 	.word	0x20000000
 8001b30:	20000004 	.word	0x20000004

08001b34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b087      	sub	sp, #28
 8001b38:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001b3a:	4b2c      	ldr	r3, [pc, #176]	; (8001bec <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f003 030c 	and.w	r3, r3, #12
 8001b42:	2b04      	cmp	r3, #4
 8001b44:	d102      	bne.n	8001b4c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b46:	4b2a      	ldr	r3, [pc, #168]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b48:	613b      	str	r3, [r7, #16]
 8001b4a:	e047      	b.n	8001bdc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001b4c:	4b27      	ldr	r3, [pc, #156]	; (8001bec <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 030c 	and.w	r3, r3, #12
 8001b54:	2b08      	cmp	r3, #8
 8001b56:	d102      	bne.n	8001b5e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b58:	4b26      	ldr	r3, [pc, #152]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b5a:	613b      	str	r3, [r7, #16]
 8001b5c:	e03e      	b.n	8001bdc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001b5e:	4b23      	ldr	r3, [pc, #140]	; (8001bec <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f003 030c 	and.w	r3, r3, #12
 8001b66:	2b0c      	cmp	r3, #12
 8001b68:	d136      	bne.n	8001bd8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b6a:	4b20      	ldr	r3, [pc, #128]	; (8001bec <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	f003 0303 	and.w	r3, r3, #3
 8001b72:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b74:	4b1d      	ldr	r3, [pc, #116]	; (8001bec <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	091b      	lsrs	r3, r3, #4
 8001b7a:	f003 030f 	and.w	r3, r3, #15
 8001b7e:	3301      	adds	r3, #1
 8001b80:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2b03      	cmp	r3, #3
 8001b86:	d10c      	bne.n	8001ba2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b88:	4a1a      	ldr	r2, [pc, #104]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b90:	4a16      	ldr	r2, [pc, #88]	; (8001bec <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b92:	68d2      	ldr	r2, [r2, #12]
 8001b94:	0a12      	lsrs	r2, r2, #8
 8001b96:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b9a:	fb02 f303 	mul.w	r3, r2, r3
 8001b9e:	617b      	str	r3, [r7, #20]
      break;
 8001ba0:	e00c      	b.n	8001bbc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ba2:	4a13      	ldr	r2, [pc, #76]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001baa:	4a10      	ldr	r2, [pc, #64]	; (8001bec <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bac:	68d2      	ldr	r2, [r2, #12]
 8001bae:	0a12      	lsrs	r2, r2, #8
 8001bb0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001bb4:	fb02 f303 	mul.w	r3, r2, r3
 8001bb8:	617b      	str	r3, [r7, #20]
      break;
 8001bba:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001bbc:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	0e5b      	lsrs	r3, r3, #25
 8001bc2:	f003 0303 	and.w	r3, r3, #3
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001bcc:	697a      	ldr	r2, [r7, #20]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd4:	613b      	str	r3, [r7, #16]
 8001bd6:	e001      	b.n	8001bdc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001bdc:	693b      	ldr	r3, [r7, #16]
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	371c      	adds	r7, #28
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	00f42400 	.word	0x00f42400
 8001bf4:	016e3600 	.word	0x016e3600

08001bf8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bfc:	4b03      	ldr	r3, [pc, #12]	; (8001c0c <HAL_RCC_GetHCLKFreq+0x14>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	20000000 	.word	0x20000000

08001c10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c14:	f7ff fff0 	bl	8001bf8 <HAL_RCC_GetHCLKFreq>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	0a1b      	lsrs	r3, r3, #8
 8001c20:	f003 0307 	and.w	r3, r3, #7
 8001c24:	4904      	ldr	r1, [pc, #16]	; (8001c38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c26:	5ccb      	ldrb	r3, [r1, r3]
 8001c28:	f003 031f 	and.w	r3, r3, #31
 8001c2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40021000 	.word	0x40021000
 8001c38:	08004230 	.word	0x08004230

08001c3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001c40:	f7ff ffda 	bl	8001bf8 <HAL_RCC_GetHCLKFreq>
 8001c44:	4602      	mov	r2, r0
 8001c46:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	0adb      	lsrs	r3, r3, #11
 8001c4c:	f003 0307 	and.w	r3, r3, #7
 8001c50:	4904      	ldr	r1, [pc, #16]	; (8001c64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c52:	5ccb      	ldrb	r3, [r1, r3]
 8001c54:	f003 031f 	and.w	r3, r3, #31
 8001c58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40021000 	.word	0x40021000
 8001c64:	08004230 	.word	0x08004230

08001c68 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b087      	sub	sp, #28
 8001c6c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c6e:	4b1e      	ldr	r3, [pc, #120]	; (8001ce8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	f003 0303 	and.w	r3, r3, #3
 8001c76:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c78:	4b1b      	ldr	r3, [pc, #108]	; (8001ce8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	091b      	lsrs	r3, r3, #4
 8001c7e:	f003 030f 	and.w	r3, r3, #15
 8001c82:	3301      	adds	r3, #1
 8001c84:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	2b03      	cmp	r3, #3
 8001c8a:	d10c      	bne.n	8001ca6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c8c:	4a17      	ldr	r2, [pc, #92]	; (8001cec <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c94:	4a14      	ldr	r2, [pc, #80]	; (8001ce8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c96:	68d2      	ldr	r2, [r2, #12]
 8001c98:	0a12      	lsrs	r2, r2, #8
 8001c9a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c9e:	fb02 f303 	mul.w	r3, r2, r3
 8001ca2:	617b      	str	r3, [r7, #20]
    break;
 8001ca4:	e00c      	b.n	8001cc0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ca6:	4a12      	ldr	r2, [pc, #72]	; (8001cf0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cae:	4a0e      	ldr	r2, [pc, #56]	; (8001ce8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001cb0:	68d2      	ldr	r2, [r2, #12]
 8001cb2:	0a12      	lsrs	r2, r2, #8
 8001cb4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001cb8:	fb02 f303 	mul.w	r3, r2, r3
 8001cbc:	617b      	str	r3, [r7, #20]
    break;
 8001cbe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cc0:	4b09      	ldr	r3, [pc, #36]	; (8001ce8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	0e5b      	lsrs	r3, r3, #25
 8001cc6:	f003 0303 	and.w	r3, r3, #3
 8001cca:	3301      	adds	r3, #1
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001cd0:	697a      	ldr	r2, [r7, #20]
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001cda:	687b      	ldr	r3, [r7, #4]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	371c      	adds	r7, #28
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	016e3600 	.word	0x016e3600
 8001cf0:	00f42400 	.word	0x00f42400

08001cf4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d00:	2300      	movs	r3, #0
 8001d02:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f000 8098 	beq.w	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d12:	2300      	movs	r3, #0
 8001d14:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d16:	4b43      	ldr	r3, [pc, #268]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d10d      	bne.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d22:	4b40      	ldr	r3, [pc, #256]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d26:	4a3f      	ldr	r2, [pc, #252]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d2c:	6593      	str	r3, [r2, #88]	; 0x58
 8001d2e:	4b3d      	ldr	r3, [pc, #244]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d36:	60bb      	str	r3, [r7, #8]
 8001d38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d3e:	4b3a      	ldr	r3, [pc, #232]	; (8001e28 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a39      	ldr	r2, [pc, #228]	; (8001e28 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001d44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d48:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d4a:	f7fe fe7b 	bl	8000a44 <HAL_GetTick>
 8001d4e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d50:	e009      	b.n	8001d66 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d52:	f7fe fe77 	bl	8000a44 <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d902      	bls.n	8001d66 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	74fb      	strb	r3, [r7, #19]
        break;
 8001d64:	e005      	b.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d66:	4b30      	ldr	r3, [pc, #192]	; (8001e28 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d0ef      	beq.n	8001d52 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001d72:	7cfb      	ldrb	r3, [r7, #19]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d159      	bne.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001d78:	4b2a      	ldr	r3, [pc, #168]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d82:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d01e      	beq.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d019      	beq.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001d94:	4b23      	ldr	r3, [pc, #140]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d9e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001da0:	4b20      	ldr	r3, [pc, #128]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001da6:	4a1f      	ldr	r2, [pc, #124]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001db0:	4b1c      	ldr	r3, [pc, #112]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001db6:	4a1b      	ldr	r2, [pc, #108]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001db8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001dc0:	4a18      	ldr	r2, [pc, #96]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d016      	beq.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd2:	f7fe fe37 	bl	8000a44 <HAL_GetTick>
 8001dd6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dd8:	e00b      	b.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dda:	f7fe fe33 	bl	8000a44 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d902      	bls.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	74fb      	strb	r3, [r7, #19]
            break;
 8001df0:	e006      	b.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001df2:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0ec      	beq.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001e00:	7cfb      	ldrb	r3, [r7, #19]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d10b      	bne.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e06:	4b07      	ldr	r3, [pc, #28]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e14:	4903      	ldr	r1, [pc, #12]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e16:	4313      	orrs	r3, r2
 8001e18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001e1c:	e008      	b.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001e1e:	7cfb      	ldrb	r3, [r7, #19]
 8001e20:	74bb      	strb	r3, [r7, #18]
 8001e22:	e005      	b.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001e24:	40021000 	.word	0x40021000
 8001e28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e2c:	7cfb      	ldrb	r3, [r7, #19]
 8001e2e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e30:	7c7b      	ldrb	r3, [r7, #17]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d105      	bne.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e36:	4ba6      	ldr	r3, [pc, #664]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e3a:	4aa5      	ldr	r2, [pc, #660]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e40:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d00a      	beq.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e4e:	4ba0      	ldr	r3, [pc, #640]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e54:	f023 0203 	bic.w	r2, r3, #3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	499c      	ldr	r1, [pc, #624]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d00a      	beq.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e70:	4b97      	ldr	r3, [pc, #604]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e76:	f023 020c 	bic.w	r2, r3, #12
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	4994      	ldr	r1, [pc, #592]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0304 	and.w	r3, r3, #4
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d00a      	beq.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001e92:	4b8f      	ldr	r3, [pc, #572]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e98:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	498b      	ldr	r1, [pc, #556]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0308 	and.w	r3, r3, #8
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d00a      	beq.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001eb4:	4b86      	ldr	r3, [pc, #536]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	4983      	ldr	r1, [pc, #524]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0320 	and.w	r3, r3, #32
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d00a      	beq.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001ed6:	4b7e      	ldr	r3, [pc, #504]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001edc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	497a      	ldr	r1, [pc, #488]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d00a      	beq.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ef8:	4b75      	ldr	r3, [pc, #468]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001efe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	4972      	ldr	r1, [pc, #456]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d00a      	beq.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001f1a:	4b6d      	ldr	r3, [pc, #436]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f20:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	69db      	ldr	r3, [r3, #28]
 8001f28:	4969      	ldr	r1, [pc, #420]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d00a      	beq.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f3c:	4b64      	ldr	r3, [pc, #400]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f42:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a1b      	ldr	r3, [r3, #32]
 8001f4a:	4961      	ldr	r1, [pc, #388]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d00a      	beq.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f5e:	4b5c      	ldr	r3, [pc, #368]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f64:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6c:	4958      	ldr	r1, [pc, #352]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d015      	beq.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f80:	4b53      	ldr	r3, [pc, #332]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8e:	4950      	ldr	r1, [pc, #320]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f9e:	d105      	bne.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001fa0:	4b4b      	ldr	r3, [pc, #300]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	4a4a      	ldr	r2, [pc, #296]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fa6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001faa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d015      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001fb8:	4b45      	ldr	r3, [pc, #276]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fbe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc6:	4942      	ldr	r1, [pc, #264]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fd6:	d105      	bne.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001fd8:	4b3d      	ldr	r3, [pc, #244]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	4a3c      	ldr	r2, [pc, #240]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fe2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d015      	beq.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001ff0:	4b37      	ldr	r3, [pc, #220]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ff6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffe:	4934      	ldr	r1, [pc, #208]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002000:	4313      	orrs	r3, r2
 8002002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800200e:	d105      	bne.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002010:	4b2f      	ldr	r3, [pc, #188]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	4a2e      	ldr	r2, [pc, #184]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002016:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800201a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d015      	beq.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002028:	4b29      	ldr	r3, [pc, #164]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800202a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800202e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002036:	4926      	ldr	r1, [pc, #152]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002038:	4313      	orrs	r3, r2
 800203a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002042:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002046:	d105      	bne.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002048:	4b21      	ldr	r3, [pc, #132]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	4a20      	ldr	r2, [pc, #128]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800204e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002052:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d015      	beq.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002060:	4b1b      	ldr	r3, [pc, #108]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002066:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800206e:	4918      	ldr	r1, [pc, #96]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002070:	4313      	orrs	r3, r2
 8002072:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800207a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800207e:	d105      	bne.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002080:	4b13      	ldr	r3, [pc, #76]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	4a12      	ldr	r2, [pc, #72]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002086:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800208a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d015      	beq.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002098:	4b0d      	ldr	r3, [pc, #52]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800209a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800209e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020a6:	490a      	ldr	r1, [pc, #40]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80020b6:	d105      	bne.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80020b8:	4b05      	ldr	r3, [pc, #20]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	4a04      	ldr	r2, [pc, #16]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020c2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80020c4:	7cbb      	ldrb	r3, [r7, #18]
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3718      	adds	r7, #24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	40021000 	.word	0x40021000

080020d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e042      	b.n	800216c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d106      	bne.n	80020fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f7fe fb6f 	bl	80007dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2224      	movs	r2, #36	; 0x24
 8002102:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f022 0201 	bic.w	r2, r2, #1
 8002114:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211a:	2b00      	cmp	r3, #0
 800211c:	d002      	beq.n	8002124 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 fe84 	bl	8002e2c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f000 fbb5 	bl	8002894 <UART_SetConfig>
 800212a:	4603      	mov	r3, r0
 800212c:	2b01      	cmp	r3, #1
 800212e:	d101      	bne.n	8002134 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e01b      	b.n	800216c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	685a      	ldr	r2, [r3, #4]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002142:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	689a      	ldr	r2, [r3, #8]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002152:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f042 0201 	orr.w	r2, r2, #1
 8002162:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f000 ff03 	bl	8002f70 <UART_CheckIdleState>
 800216a:	4603      	mov	r3, r0
}
 800216c:	4618      	mov	r0, r3
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b08a      	sub	sp, #40	; 0x28
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	4613      	mov	r3, r2
 8002180:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002188:	2b20      	cmp	r3, #32
 800218a:	d137      	bne.n	80021fc <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d002      	beq.n	8002198 <HAL_UART_Receive_IT+0x24>
 8002192:	88fb      	ldrh	r3, [r7, #6]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d101      	bne.n	800219c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e030      	b.n	80021fe <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2200      	movs	r2, #0
 80021a0:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a18      	ldr	r2, [pc, #96]	; (8002208 <HAL_UART_Receive_IT+0x94>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d01f      	beq.n	80021ec <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d018      	beq.n	80021ec <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	e853 3f00 	ldrex	r3, [r3]
 80021c6:	613b      	str	r3, [r7, #16]
   return(result);
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80021ce:	627b      	str	r3, [r7, #36]	; 0x24
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	461a      	mov	r2, r3
 80021d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d8:	623b      	str	r3, [r7, #32]
 80021da:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021dc:	69f9      	ldr	r1, [r7, #28]
 80021de:	6a3a      	ldr	r2, [r7, #32]
 80021e0:	e841 2300 	strex	r3, r2, [r1]
 80021e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1e6      	bne.n	80021ba <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80021ec:	88fb      	ldrh	r3, [r7, #6]
 80021ee:	461a      	mov	r2, r3
 80021f0:	68b9      	ldr	r1, [r7, #8]
 80021f2:	68f8      	ldr	r0, [r7, #12]
 80021f4:	f000 ffd4 	bl	80031a0 <UART_Start_Receive_IT>
 80021f8:	4603      	mov	r3, r0
 80021fa:	e000      	b.n	80021fe <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80021fc:	2302      	movs	r3, #2
  }
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3728      	adds	r7, #40	; 0x28
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40008000 	.word	0x40008000

0800220c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b0ba      	sub	sp, #232	; 0xe8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002232:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002236:	f640 030f 	movw	r3, #2063	; 0x80f
 800223a:	4013      	ands	r3, r2
 800223c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002240:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002244:	2b00      	cmp	r3, #0
 8002246:	d11b      	bne.n	8002280 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800224c:	f003 0320 	and.w	r3, r3, #32
 8002250:	2b00      	cmp	r3, #0
 8002252:	d015      	beq.n	8002280 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002258:	f003 0320 	and.w	r3, r3, #32
 800225c:	2b00      	cmp	r3, #0
 800225e:	d105      	bne.n	800226c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002260:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d009      	beq.n	8002280 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002270:	2b00      	cmp	r3, #0
 8002272:	f000 82e3 	beq.w	800283c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	4798      	blx	r3
      }
      return;
 800227e:	e2dd      	b.n	800283c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002280:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002284:	2b00      	cmp	r3, #0
 8002286:	f000 8123 	beq.w	80024d0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800228a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800228e:	4b8d      	ldr	r3, [pc, #564]	; (80024c4 <HAL_UART_IRQHandler+0x2b8>)
 8002290:	4013      	ands	r3, r2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d106      	bne.n	80022a4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002296:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800229a:	4b8b      	ldr	r3, [pc, #556]	; (80024c8 <HAL_UART_IRQHandler+0x2bc>)
 800229c:	4013      	ands	r3, r2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f000 8116 	beq.w	80024d0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80022a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d011      	beq.n	80022d4 <HAL_UART_IRQHandler+0xc8>
 80022b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d00b      	beq.n	80022d4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2201      	movs	r2, #1
 80022c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ca:	f043 0201 	orr.w	r2, r3, #1
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80022d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d011      	beq.n	8002304 <HAL_UART_IRQHandler+0xf8>
 80022e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80022e4:	f003 0301 	and.w	r3, r3, #1
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d00b      	beq.n	8002304 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2202      	movs	r2, #2
 80022f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022fa:	f043 0204 	orr.w	r2, r3, #4
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002304:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002308:	f003 0304 	and.w	r3, r3, #4
 800230c:	2b00      	cmp	r3, #0
 800230e:	d011      	beq.n	8002334 <HAL_UART_IRQHandler+0x128>
 8002310:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00b      	beq.n	8002334 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2204      	movs	r2, #4
 8002322:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800232a:	f043 0202 	orr.w	r2, r3, #2
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002338:	f003 0308 	and.w	r3, r3, #8
 800233c:	2b00      	cmp	r3, #0
 800233e:	d017      	beq.n	8002370 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002344:	f003 0320 	and.w	r3, r3, #32
 8002348:	2b00      	cmp	r3, #0
 800234a:	d105      	bne.n	8002358 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800234c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002350:	4b5c      	ldr	r3, [pc, #368]	; (80024c4 <HAL_UART_IRQHandler+0x2b8>)
 8002352:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002354:	2b00      	cmp	r3, #0
 8002356:	d00b      	beq.n	8002370 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2208      	movs	r2, #8
 800235e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002366:	f043 0208 	orr.w	r2, r3, #8
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002374:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002378:	2b00      	cmp	r3, #0
 800237a:	d012      	beq.n	80023a2 <HAL_UART_IRQHandler+0x196>
 800237c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002380:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d00c      	beq.n	80023a2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002390:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002398:	f043 0220 	orr.w	r2, r3, #32
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f000 8249 	beq.w	8002840 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80023ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023b2:	f003 0320 	and.w	r3, r3, #32
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d013      	beq.n	80023e2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80023ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023be:	f003 0320 	and.w	r3, r3, #32
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d105      	bne.n	80023d2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80023c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d007      	beq.n	80023e2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023f6:	2b40      	cmp	r3, #64	; 0x40
 80023f8:	d005      	beq.n	8002406 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80023fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80023fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002402:	2b00      	cmp	r3, #0
 8002404:	d054      	beq.n	80024b0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 ffec 	bl	80033e4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002416:	2b40      	cmp	r3, #64	; 0x40
 8002418:	d146      	bne.n	80024a8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	3308      	adds	r3, #8
 8002420:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002424:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002428:	e853 3f00 	ldrex	r3, [r3]
 800242c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002430:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002434:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002438:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	3308      	adds	r3, #8
 8002442:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002446:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800244a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800244e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002452:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002456:	e841 2300 	strex	r3, r2, [r1]
 800245a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800245e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1d9      	bne.n	800241a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800246c:	2b00      	cmp	r3, #0
 800246e:	d017      	beq.n	80024a0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002476:	4a15      	ldr	r2, [pc, #84]	; (80024cc <HAL_UART_IRQHandler+0x2c0>)
 8002478:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002480:	4618      	mov	r0, r3
 8002482:	f7fe fc53 	bl	8000d2c <HAL_DMA_Abort_IT>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d019      	beq.n	80024c0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800249a:	4610      	mov	r0, r2
 800249c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800249e:	e00f      	b.n	80024c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 f9e1 	bl	8002868 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024a6:	e00b      	b.n	80024c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f000 f9dd 	bl	8002868 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024ae:	e007      	b.n	80024c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f000 f9d9 	bl	8002868 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80024be:	e1bf      	b.n	8002840 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024c0:	bf00      	nop
    return;
 80024c2:	e1bd      	b.n	8002840 <HAL_UART_IRQHandler+0x634>
 80024c4:	10000001 	.word	0x10000001
 80024c8:	04000120 	.word	0x04000120
 80024cc:	080034b1 	.word	0x080034b1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	f040 8153 	bne.w	8002780 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80024da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024de:	f003 0310 	and.w	r3, r3, #16
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f000 814c 	beq.w	8002780 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80024e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024ec:	f003 0310 	and.w	r3, r3, #16
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f000 8145 	beq.w	8002780 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2210      	movs	r2, #16
 80024fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002508:	2b40      	cmp	r3, #64	; 0x40
 800250a:	f040 80bb 	bne.w	8002684 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800251c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002520:	2b00      	cmp	r3, #0
 8002522:	f000 818f 	beq.w	8002844 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800252c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002530:	429a      	cmp	r2, r3
 8002532:	f080 8187 	bcs.w	8002844 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800253c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0320 	and.w	r3, r3, #32
 800254e:	2b00      	cmp	r3, #0
 8002550:	f040 8087 	bne.w	8002662 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800255c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002560:	e853 3f00 	ldrex	r3, [r3]
 8002564:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002568:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800256c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002570:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	461a      	mov	r2, r3
 800257a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800257e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002582:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002586:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800258a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800258e:	e841 2300 	strex	r3, r2, [r1]
 8002592:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002596:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1da      	bne.n	8002554 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	3308      	adds	r3, #8
 80025a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025a8:	e853 3f00 	ldrex	r3, [r3]
 80025ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80025ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025b0:	f023 0301 	bic.w	r3, r3, #1
 80025b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	3308      	adds	r3, #8
 80025be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80025c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80025c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80025ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80025ce:	e841 2300 	strex	r3, r2, [r1]
 80025d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80025d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1e1      	bne.n	800259e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	3308      	adds	r3, #8
 80025e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025e4:	e853 3f00 	ldrex	r3, [r3]
 80025e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80025ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	3308      	adds	r3, #8
 80025fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80025fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002600:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002602:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002604:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002606:	e841 2300 	strex	r3, r2, [r1]
 800260a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800260c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1e3      	bne.n	80025da <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2220      	movs	r2, #32
 8002616:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002626:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002628:	e853 3f00 	ldrex	r3, [r3]
 800262c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800262e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002630:	f023 0310 	bic.w	r3, r3, #16
 8002634:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	461a      	mov	r2, r3
 800263e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002642:	65bb      	str	r3, [r7, #88]	; 0x58
 8002644:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002646:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002648:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800264a:	e841 2300 	strex	r3, r2, [r1]
 800264e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002650:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1e4      	bne.n	8002620 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800265c:	4618      	mov	r0, r3
 800265e:	f7fe fb0c 	bl	8000c7a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2202      	movs	r2, #2
 8002666:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002674:	b29b      	uxth	r3, r3
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	b29b      	uxth	r3, r3
 800267a:	4619      	mov	r1, r3
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f000 f8fd 	bl	800287c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002682:	e0df      	b.n	8002844 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002690:	b29b      	uxth	r3, r3
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800269e:	b29b      	uxth	r3, r3
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f000 80d1 	beq.w	8002848 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80026a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f000 80cc 	beq.w	8002848 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026b8:	e853 3f00 	ldrex	r3, [r3]
 80026bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80026be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80026c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	461a      	mov	r2, r3
 80026ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80026d2:	647b      	str	r3, [r7, #68]	; 0x44
 80026d4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80026d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80026da:	e841 2300 	strex	r3, r2, [r1]
 80026de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80026e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1e4      	bne.n	80026b0 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	3308      	adds	r3, #8
 80026ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f0:	e853 3f00 	ldrex	r3, [r3]
 80026f4:	623b      	str	r3, [r7, #32]
   return(result);
 80026f6:	6a3b      	ldr	r3, [r7, #32]
 80026f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026fc:	f023 0301 	bic.w	r3, r3, #1
 8002700:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	3308      	adds	r3, #8
 800270a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800270e:	633a      	str	r2, [r7, #48]	; 0x30
 8002710:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002712:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002714:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002716:	e841 2300 	strex	r3, r2, [r1]
 800271a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800271c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1e1      	bne.n	80026e6 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2220      	movs	r2, #32
 8002726:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	e853 3f00 	ldrex	r3, [r3]
 8002742:	60fb      	str	r3, [r7, #12]
   return(result);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f023 0310 	bic.w	r3, r3, #16
 800274a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	461a      	mov	r2, r3
 8002754:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002758:	61fb      	str	r3, [r7, #28]
 800275a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800275c:	69b9      	ldr	r1, [r7, #24]
 800275e:	69fa      	ldr	r2, [r7, #28]
 8002760:	e841 2300 	strex	r3, r2, [r1]
 8002764:	617b      	str	r3, [r7, #20]
   return(result);
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d1e4      	bne.n	8002736 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2202      	movs	r2, #2
 8002770:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002772:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002776:	4619      	mov	r1, r3
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f000 f87f 	bl	800287c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800277e:	e063      	b.n	8002848 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002784:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d00e      	beq.n	80027aa <HAL_UART_IRQHandler+0x59e>
 800278c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002790:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d008      	beq.n	80027aa <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80027a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f001 fbe2 	bl	8003f6c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80027a8:	e051      	b.n	800284e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80027aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d014      	beq.n	80027e0 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80027b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d105      	bne.n	80027ce <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80027c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d008      	beq.n	80027e0 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d03a      	beq.n	800284c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	4798      	blx	r3
    }
    return;
 80027de:	e035      	b.n	800284c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80027e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d009      	beq.n	8002800 <HAL_UART_IRQHandler+0x5f4>
 80027ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d003      	beq.n	8002800 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f000 fe6f 	bl	80034dc <UART_EndTransmit_IT>
    return;
 80027fe:	e026      	b.n	800284e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002804:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d009      	beq.n	8002820 <HAL_UART_IRQHandler+0x614>
 800280c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002810:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d003      	beq.n	8002820 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f001 fbbb 	bl	8003f94 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800281e:	e016      	b.n	800284e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002824:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d010      	beq.n	800284e <HAL_UART_IRQHandler+0x642>
 800282c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002830:	2b00      	cmp	r3, #0
 8002832:	da0c      	bge.n	800284e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f001 fba3 	bl	8003f80 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800283a:	e008      	b.n	800284e <HAL_UART_IRQHandler+0x642>
      return;
 800283c:	bf00      	nop
 800283e:	e006      	b.n	800284e <HAL_UART_IRQHandler+0x642>
    return;
 8002840:	bf00      	nop
 8002842:	e004      	b.n	800284e <HAL_UART_IRQHandler+0x642>
      return;
 8002844:	bf00      	nop
 8002846:	e002      	b.n	800284e <HAL_UART_IRQHandler+0x642>
      return;
 8002848:	bf00      	nop
 800284a:	e000      	b.n	800284e <HAL_UART_IRQHandler+0x642>
    return;
 800284c:	bf00      	nop
  }
}
 800284e:	37e8      	adds	r7, #232	; 0xe8
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	460b      	mov	r3, r1
 8002886:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002894:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002898:	b08c      	sub	sp, #48	; 0x30
 800289a:	af00      	add	r7, sp, #0
 800289c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800289e:	2300      	movs	r3, #0
 80028a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	431a      	orrs	r2, r3
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	431a      	orrs	r2, r3
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	69db      	ldr	r3, [r3, #28]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	4bab      	ldr	r3, [pc, #684]	; (8002b70 <UART_SetConfig+0x2dc>)
 80028c4:	4013      	ands	r3, r2
 80028c6:	697a      	ldr	r2, [r7, #20]
 80028c8:	6812      	ldr	r2, [r2, #0]
 80028ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80028cc:	430b      	orrs	r3, r1
 80028ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	68da      	ldr	r2, [r3, #12]
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	430a      	orrs	r2, r1
 80028e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4aa0      	ldr	r2, [pc, #640]	; (8002b74 <UART_SetConfig+0x2e0>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d004      	beq.n	8002900 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028fc:	4313      	orrs	r3, r2
 80028fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800290a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	6812      	ldr	r2, [r2, #0]
 8002912:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002914:	430b      	orrs	r3, r1
 8002916:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291e:	f023 010f 	bic.w	r1, r3, #15
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	430a      	orrs	r2, r1
 800292c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a91      	ldr	r2, [pc, #580]	; (8002b78 <UART_SetConfig+0x2e4>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d125      	bne.n	8002984 <UART_SetConfig+0xf0>
 8002938:	4b90      	ldr	r3, [pc, #576]	; (8002b7c <UART_SetConfig+0x2e8>)
 800293a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800293e:	f003 0303 	and.w	r3, r3, #3
 8002942:	2b03      	cmp	r3, #3
 8002944:	d81a      	bhi.n	800297c <UART_SetConfig+0xe8>
 8002946:	a201      	add	r2, pc, #4	; (adr r2, 800294c <UART_SetConfig+0xb8>)
 8002948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800294c:	0800295d 	.word	0x0800295d
 8002950:	0800296d 	.word	0x0800296d
 8002954:	08002965 	.word	0x08002965
 8002958:	08002975 	.word	0x08002975
 800295c:	2301      	movs	r3, #1
 800295e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002962:	e0d6      	b.n	8002b12 <UART_SetConfig+0x27e>
 8002964:	2302      	movs	r3, #2
 8002966:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800296a:	e0d2      	b.n	8002b12 <UART_SetConfig+0x27e>
 800296c:	2304      	movs	r3, #4
 800296e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002972:	e0ce      	b.n	8002b12 <UART_SetConfig+0x27e>
 8002974:	2308      	movs	r3, #8
 8002976:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800297a:	e0ca      	b.n	8002b12 <UART_SetConfig+0x27e>
 800297c:	2310      	movs	r3, #16
 800297e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002982:	e0c6      	b.n	8002b12 <UART_SetConfig+0x27e>
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a7d      	ldr	r2, [pc, #500]	; (8002b80 <UART_SetConfig+0x2ec>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d138      	bne.n	8002a00 <UART_SetConfig+0x16c>
 800298e:	4b7b      	ldr	r3, [pc, #492]	; (8002b7c <UART_SetConfig+0x2e8>)
 8002990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002994:	f003 030c 	and.w	r3, r3, #12
 8002998:	2b0c      	cmp	r3, #12
 800299a:	d82d      	bhi.n	80029f8 <UART_SetConfig+0x164>
 800299c:	a201      	add	r2, pc, #4	; (adr r2, 80029a4 <UART_SetConfig+0x110>)
 800299e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029a2:	bf00      	nop
 80029a4:	080029d9 	.word	0x080029d9
 80029a8:	080029f9 	.word	0x080029f9
 80029ac:	080029f9 	.word	0x080029f9
 80029b0:	080029f9 	.word	0x080029f9
 80029b4:	080029e9 	.word	0x080029e9
 80029b8:	080029f9 	.word	0x080029f9
 80029bc:	080029f9 	.word	0x080029f9
 80029c0:	080029f9 	.word	0x080029f9
 80029c4:	080029e1 	.word	0x080029e1
 80029c8:	080029f9 	.word	0x080029f9
 80029cc:	080029f9 	.word	0x080029f9
 80029d0:	080029f9 	.word	0x080029f9
 80029d4:	080029f1 	.word	0x080029f1
 80029d8:	2300      	movs	r3, #0
 80029da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80029de:	e098      	b.n	8002b12 <UART_SetConfig+0x27e>
 80029e0:	2302      	movs	r3, #2
 80029e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80029e6:	e094      	b.n	8002b12 <UART_SetConfig+0x27e>
 80029e8:	2304      	movs	r3, #4
 80029ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80029ee:	e090      	b.n	8002b12 <UART_SetConfig+0x27e>
 80029f0:	2308      	movs	r3, #8
 80029f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80029f6:	e08c      	b.n	8002b12 <UART_SetConfig+0x27e>
 80029f8:	2310      	movs	r3, #16
 80029fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80029fe:	e088      	b.n	8002b12 <UART_SetConfig+0x27e>
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a5f      	ldr	r2, [pc, #380]	; (8002b84 <UART_SetConfig+0x2f0>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d125      	bne.n	8002a56 <UART_SetConfig+0x1c2>
 8002a0a:	4b5c      	ldr	r3, [pc, #368]	; (8002b7c <UART_SetConfig+0x2e8>)
 8002a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a10:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002a14:	2b30      	cmp	r3, #48	; 0x30
 8002a16:	d016      	beq.n	8002a46 <UART_SetConfig+0x1b2>
 8002a18:	2b30      	cmp	r3, #48	; 0x30
 8002a1a:	d818      	bhi.n	8002a4e <UART_SetConfig+0x1ba>
 8002a1c:	2b20      	cmp	r3, #32
 8002a1e:	d00a      	beq.n	8002a36 <UART_SetConfig+0x1a2>
 8002a20:	2b20      	cmp	r3, #32
 8002a22:	d814      	bhi.n	8002a4e <UART_SetConfig+0x1ba>
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d002      	beq.n	8002a2e <UART_SetConfig+0x19a>
 8002a28:	2b10      	cmp	r3, #16
 8002a2a:	d008      	beq.n	8002a3e <UART_SetConfig+0x1aa>
 8002a2c:	e00f      	b.n	8002a4e <UART_SetConfig+0x1ba>
 8002a2e:	2300      	movs	r3, #0
 8002a30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a34:	e06d      	b.n	8002b12 <UART_SetConfig+0x27e>
 8002a36:	2302      	movs	r3, #2
 8002a38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a3c:	e069      	b.n	8002b12 <UART_SetConfig+0x27e>
 8002a3e:	2304      	movs	r3, #4
 8002a40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a44:	e065      	b.n	8002b12 <UART_SetConfig+0x27e>
 8002a46:	2308      	movs	r3, #8
 8002a48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a4c:	e061      	b.n	8002b12 <UART_SetConfig+0x27e>
 8002a4e:	2310      	movs	r3, #16
 8002a50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a54:	e05d      	b.n	8002b12 <UART_SetConfig+0x27e>
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a4b      	ldr	r2, [pc, #300]	; (8002b88 <UART_SetConfig+0x2f4>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d125      	bne.n	8002aac <UART_SetConfig+0x218>
 8002a60:	4b46      	ldr	r3, [pc, #280]	; (8002b7c <UART_SetConfig+0x2e8>)
 8002a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a66:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002a6a:	2bc0      	cmp	r3, #192	; 0xc0
 8002a6c:	d016      	beq.n	8002a9c <UART_SetConfig+0x208>
 8002a6e:	2bc0      	cmp	r3, #192	; 0xc0
 8002a70:	d818      	bhi.n	8002aa4 <UART_SetConfig+0x210>
 8002a72:	2b80      	cmp	r3, #128	; 0x80
 8002a74:	d00a      	beq.n	8002a8c <UART_SetConfig+0x1f8>
 8002a76:	2b80      	cmp	r3, #128	; 0x80
 8002a78:	d814      	bhi.n	8002aa4 <UART_SetConfig+0x210>
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d002      	beq.n	8002a84 <UART_SetConfig+0x1f0>
 8002a7e:	2b40      	cmp	r3, #64	; 0x40
 8002a80:	d008      	beq.n	8002a94 <UART_SetConfig+0x200>
 8002a82:	e00f      	b.n	8002aa4 <UART_SetConfig+0x210>
 8002a84:	2300      	movs	r3, #0
 8002a86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a8a:	e042      	b.n	8002b12 <UART_SetConfig+0x27e>
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a92:	e03e      	b.n	8002b12 <UART_SetConfig+0x27e>
 8002a94:	2304      	movs	r3, #4
 8002a96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a9a:	e03a      	b.n	8002b12 <UART_SetConfig+0x27e>
 8002a9c:	2308      	movs	r3, #8
 8002a9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002aa2:	e036      	b.n	8002b12 <UART_SetConfig+0x27e>
 8002aa4:	2310      	movs	r3, #16
 8002aa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002aaa:	e032      	b.n	8002b12 <UART_SetConfig+0x27e>
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a30      	ldr	r2, [pc, #192]	; (8002b74 <UART_SetConfig+0x2e0>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d12a      	bne.n	8002b0c <UART_SetConfig+0x278>
 8002ab6:	4b31      	ldr	r3, [pc, #196]	; (8002b7c <UART_SetConfig+0x2e8>)
 8002ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002abc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002ac0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ac4:	d01a      	beq.n	8002afc <UART_SetConfig+0x268>
 8002ac6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002aca:	d81b      	bhi.n	8002b04 <UART_SetConfig+0x270>
 8002acc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ad0:	d00c      	beq.n	8002aec <UART_SetConfig+0x258>
 8002ad2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ad6:	d815      	bhi.n	8002b04 <UART_SetConfig+0x270>
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d003      	beq.n	8002ae4 <UART_SetConfig+0x250>
 8002adc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ae0:	d008      	beq.n	8002af4 <UART_SetConfig+0x260>
 8002ae2:	e00f      	b.n	8002b04 <UART_SetConfig+0x270>
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002aea:	e012      	b.n	8002b12 <UART_SetConfig+0x27e>
 8002aec:	2302      	movs	r3, #2
 8002aee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002af2:	e00e      	b.n	8002b12 <UART_SetConfig+0x27e>
 8002af4:	2304      	movs	r3, #4
 8002af6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002afa:	e00a      	b.n	8002b12 <UART_SetConfig+0x27e>
 8002afc:	2308      	movs	r3, #8
 8002afe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b02:	e006      	b.n	8002b12 <UART_SetConfig+0x27e>
 8002b04:	2310      	movs	r3, #16
 8002b06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b0a:	e002      	b.n	8002b12 <UART_SetConfig+0x27e>
 8002b0c:	2310      	movs	r3, #16
 8002b0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a17      	ldr	r2, [pc, #92]	; (8002b74 <UART_SetConfig+0x2e0>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	f040 80a8 	bne.w	8002c6e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002b1e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002b22:	2b08      	cmp	r3, #8
 8002b24:	d834      	bhi.n	8002b90 <UART_SetConfig+0x2fc>
 8002b26:	a201      	add	r2, pc, #4	; (adr r2, 8002b2c <UART_SetConfig+0x298>)
 8002b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b2c:	08002b51 	.word	0x08002b51
 8002b30:	08002b91 	.word	0x08002b91
 8002b34:	08002b59 	.word	0x08002b59
 8002b38:	08002b91 	.word	0x08002b91
 8002b3c:	08002b5f 	.word	0x08002b5f
 8002b40:	08002b91 	.word	0x08002b91
 8002b44:	08002b91 	.word	0x08002b91
 8002b48:	08002b91 	.word	0x08002b91
 8002b4c:	08002b67 	.word	0x08002b67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b50:	f7ff f85e 	bl	8001c10 <HAL_RCC_GetPCLK1Freq>
 8002b54:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002b56:	e021      	b.n	8002b9c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b58:	4b0c      	ldr	r3, [pc, #48]	; (8002b8c <UART_SetConfig+0x2f8>)
 8002b5a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002b5c:	e01e      	b.n	8002b9c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b5e:	f7fe ffe9 	bl	8001b34 <HAL_RCC_GetSysClockFreq>
 8002b62:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002b64:	e01a      	b.n	8002b9c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b6a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002b6c:	e016      	b.n	8002b9c <UART_SetConfig+0x308>
 8002b6e:	bf00      	nop
 8002b70:	cfff69f3 	.word	0xcfff69f3
 8002b74:	40008000 	.word	0x40008000
 8002b78:	40013800 	.word	0x40013800
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	40004400 	.word	0x40004400
 8002b84:	40004800 	.word	0x40004800
 8002b88:	40004c00 	.word	0x40004c00
 8002b8c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002b90:	2300      	movs	r3, #0
 8002b92:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002b9a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f000 812a 	beq.w	8002df8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba8:	4a9e      	ldr	r2, [pc, #632]	; (8002e24 <UART_SetConfig+0x590>)
 8002baa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb2:	fbb3 f3f2 	udiv	r3, r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	685a      	ldr	r2, [r3, #4]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	4413      	add	r3, r2
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d305      	bcc.n	8002bd4 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d903      	bls.n	8002bdc <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002bda:	e10d      	b.n	8002df8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bde:	2200      	movs	r2, #0
 8002be0:	60bb      	str	r3, [r7, #8]
 8002be2:	60fa      	str	r2, [r7, #12]
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be8:	4a8e      	ldr	r2, [pc, #568]	; (8002e24 <UART_SetConfig+0x590>)
 8002bea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	603b      	str	r3, [r7, #0]
 8002bf4:	607a      	str	r2, [r7, #4]
 8002bf6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002bfa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002bfe:	f7fd fb0b 	bl	8000218 <__aeabi_uldivmod>
 8002c02:	4602      	mov	r2, r0
 8002c04:	460b      	mov	r3, r1
 8002c06:	4610      	mov	r0, r2
 8002c08:	4619      	mov	r1, r3
 8002c0a:	f04f 0200 	mov.w	r2, #0
 8002c0e:	f04f 0300 	mov.w	r3, #0
 8002c12:	020b      	lsls	r3, r1, #8
 8002c14:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002c18:	0202      	lsls	r2, r0, #8
 8002c1a:	6979      	ldr	r1, [r7, #20]
 8002c1c:	6849      	ldr	r1, [r1, #4]
 8002c1e:	0849      	lsrs	r1, r1, #1
 8002c20:	2000      	movs	r0, #0
 8002c22:	460c      	mov	r4, r1
 8002c24:	4605      	mov	r5, r0
 8002c26:	eb12 0804 	adds.w	r8, r2, r4
 8002c2a:	eb43 0905 	adc.w	r9, r3, r5
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	469a      	mov	sl, r3
 8002c36:	4693      	mov	fp, r2
 8002c38:	4652      	mov	r2, sl
 8002c3a:	465b      	mov	r3, fp
 8002c3c:	4640      	mov	r0, r8
 8002c3e:	4649      	mov	r1, r9
 8002c40:	f7fd faea 	bl	8000218 <__aeabi_uldivmod>
 8002c44:	4602      	mov	r2, r0
 8002c46:	460b      	mov	r3, r1
 8002c48:	4613      	mov	r3, r2
 8002c4a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002c4c:	6a3b      	ldr	r3, [r7, #32]
 8002c4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c52:	d308      	bcc.n	8002c66 <UART_SetConfig+0x3d2>
 8002c54:	6a3b      	ldr	r3, [r7, #32]
 8002c56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c5a:	d204      	bcs.n	8002c66 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	6a3a      	ldr	r2, [r7, #32]
 8002c62:	60da      	str	r2, [r3, #12]
 8002c64:	e0c8      	b.n	8002df8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002c6c:	e0c4      	b.n	8002df8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c76:	d167      	bne.n	8002d48 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8002c78:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002c7c:	2b08      	cmp	r3, #8
 8002c7e:	d828      	bhi.n	8002cd2 <UART_SetConfig+0x43e>
 8002c80:	a201      	add	r2, pc, #4	; (adr r2, 8002c88 <UART_SetConfig+0x3f4>)
 8002c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c86:	bf00      	nop
 8002c88:	08002cad 	.word	0x08002cad
 8002c8c:	08002cb5 	.word	0x08002cb5
 8002c90:	08002cbd 	.word	0x08002cbd
 8002c94:	08002cd3 	.word	0x08002cd3
 8002c98:	08002cc3 	.word	0x08002cc3
 8002c9c:	08002cd3 	.word	0x08002cd3
 8002ca0:	08002cd3 	.word	0x08002cd3
 8002ca4:	08002cd3 	.word	0x08002cd3
 8002ca8:	08002ccb 	.word	0x08002ccb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cac:	f7fe ffb0 	bl	8001c10 <HAL_RCC_GetPCLK1Freq>
 8002cb0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002cb2:	e014      	b.n	8002cde <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002cb4:	f7fe ffc2 	bl	8001c3c <HAL_RCC_GetPCLK2Freq>
 8002cb8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002cba:	e010      	b.n	8002cde <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002cbc:	4b5a      	ldr	r3, [pc, #360]	; (8002e28 <UART_SetConfig+0x594>)
 8002cbe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002cc0:	e00d      	b.n	8002cde <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cc2:	f7fe ff37 	bl	8001b34 <HAL_RCC_GetSysClockFreq>
 8002cc6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002cc8:	e009      	b.n	8002cde <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002cd0:	e005      	b.n	8002cde <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002cdc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f000 8089 	beq.w	8002df8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cea:	4a4e      	ldr	r2, [pc, #312]	; (8002e24 <UART_SetConfig+0x590>)
 8002cec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf4:	fbb3 f3f2 	udiv	r3, r3, r2
 8002cf8:	005a      	lsls	r2, r3, #1
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	085b      	lsrs	r3, r3, #1
 8002d00:	441a      	add	r2, r3
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d0a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d0c:	6a3b      	ldr	r3, [r7, #32]
 8002d0e:	2b0f      	cmp	r3, #15
 8002d10:	d916      	bls.n	8002d40 <UART_SetConfig+0x4ac>
 8002d12:	6a3b      	ldr	r3, [r7, #32]
 8002d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d18:	d212      	bcs.n	8002d40 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d1a:	6a3b      	ldr	r3, [r7, #32]
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	f023 030f 	bic.w	r3, r3, #15
 8002d22:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d24:	6a3b      	ldr	r3, [r7, #32]
 8002d26:	085b      	lsrs	r3, r3, #1
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	f003 0307 	and.w	r3, r3, #7
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	8bfb      	ldrh	r3, [r7, #30]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	8bfa      	ldrh	r2, [r7, #30]
 8002d3c:	60da      	str	r2, [r3, #12]
 8002d3e:	e05b      	b.n	8002df8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002d46:	e057      	b.n	8002df8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d48:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002d4c:	2b08      	cmp	r3, #8
 8002d4e:	d828      	bhi.n	8002da2 <UART_SetConfig+0x50e>
 8002d50:	a201      	add	r2, pc, #4	; (adr r2, 8002d58 <UART_SetConfig+0x4c4>)
 8002d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d56:	bf00      	nop
 8002d58:	08002d7d 	.word	0x08002d7d
 8002d5c:	08002d85 	.word	0x08002d85
 8002d60:	08002d8d 	.word	0x08002d8d
 8002d64:	08002da3 	.word	0x08002da3
 8002d68:	08002d93 	.word	0x08002d93
 8002d6c:	08002da3 	.word	0x08002da3
 8002d70:	08002da3 	.word	0x08002da3
 8002d74:	08002da3 	.word	0x08002da3
 8002d78:	08002d9b 	.word	0x08002d9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d7c:	f7fe ff48 	bl	8001c10 <HAL_RCC_GetPCLK1Freq>
 8002d80:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002d82:	e014      	b.n	8002dae <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d84:	f7fe ff5a 	bl	8001c3c <HAL_RCC_GetPCLK2Freq>
 8002d88:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002d8a:	e010      	b.n	8002dae <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d8c:	4b26      	ldr	r3, [pc, #152]	; (8002e28 <UART_SetConfig+0x594>)
 8002d8e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002d90:	e00d      	b.n	8002dae <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d92:	f7fe fecf 	bl	8001b34 <HAL_RCC_GetSysClockFreq>
 8002d96:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002d98:	e009      	b.n	8002dae <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d9e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002da0:	e005      	b.n	8002dae <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8002da2:	2300      	movs	r3, #0
 8002da4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002dac:	bf00      	nop
    }

    if (pclk != 0U)
 8002dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d021      	beq.n	8002df8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db8:	4a1a      	ldr	r2, [pc, #104]	; (8002e24 <UART_SetConfig+0x590>)
 8002dba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc2:	fbb3 f2f2 	udiv	r2, r3, r2
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	085b      	lsrs	r3, r3, #1
 8002dcc:	441a      	add	r2, r3
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002dd8:	6a3b      	ldr	r3, [r7, #32]
 8002dda:	2b0f      	cmp	r3, #15
 8002ddc:	d909      	bls.n	8002df2 <UART_SetConfig+0x55e>
 8002dde:	6a3b      	ldr	r3, [r7, #32]
 8002de0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002de4:	d205      	bcs.n	8002df2 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002de6:	6a3b      	ldr	r3, [r7, #32]
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	60da      	str	r2, [r3, #12]
 8002df0:	e002      	b.n	8002df8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	2200      	movs	r2, #0
 8002e12:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8002e14:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3730      	adds	r7, #48	; 0x30
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e22:	bf00      	nop
 8002e24:	08004238 	.word	0x08004238
 8002e28:	00f42400 	.word	0x00f42400

08002e2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e38:	f003 0308 	and.w	r3, r3, #8
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00a      	beq.n	8002e56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	430a      	orrs	r2, r1
 8002e54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00a      	beq.n	8002e78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	430a      	orrs	r2, r1
 8002e76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d00a      	beq.n	8002e9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	430a      	orrs	r2, r1
 8002e98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9e:	f003 0304 	and.w	r3, r3, #4
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00a      	beq.n	8002ebc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec0:	f003 0310 	and.w	r3, r3, #16
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00a      	beq.n	8002ede <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	430a      	orrs	r2, r1
 8002edc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee2:	f003 0320 	and.w	r3, r3, #32
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00a      	beq.n	8002f00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	430a      	orrs	r2, r1
 8002efe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d01a      	beq.n	8002f42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f2a:	d10a      	bne.n	8002f42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00a      	beq.n	8002f64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	430a      	orrs	r2, r1
 8002f62:	605a      	str	r2, [r3, #4]
  }
}
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b098      	sub	sp, #96	; 0x60
 8002f74:	af02      	add	r7, sp, #8
 8002f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f80:	f7fd fd60 	bl	8000a44 <HAL_GetTick>
 8002f84:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0308 	and.w	r3, r3, #8
 8002f90:	2b08      	cmp	r3, #8
 8002f92:	d12f      	bne.n	8002ff4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 f88e 	bl	80030c4 <UART_WaitOnFlagUntilTimeout>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d022      	beq.n	8002ff4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb6:	e853 3f00 	ldrex	r3, [r3]
 8002fba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fc2:	653b      	str	r3, [r7, #80]	; 0x50
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	461a      	mov	r2, r3
 8002fca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fcc:	647b      	str	r3, [r7, #68]	; 0x44
 8002fce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002fd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002fd4:	e841 2300 	strex	r3, r2, [r1]
 8002fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002fda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1e6      	bne.n	8002fae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e063      	b.n	80030bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0304 	and.w	r3, r3, #4
 8002ffe:	2b04      	cmp	r3, #4
 8003000:	d149      	bne.n	8003096 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003002:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003006:	9300      	str	r3, [sp, #0]
 8003008:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800300a:	2200      	movs	r2, #0
 800300c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f000 f857 	bl	80030c4 <UART_WaitOnFlagUntilTimeout>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d03c      	beq.n	8003096 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003024:	e853 3f00 	ldrex	r3, [r3]
 8003028:	623b      	str	r3, [r7, #32]
   return(result);
 800302a:	6a3b      	ldr	r3, [r7, #32]
 800302c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003030:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	461a      	mov	r2, r3
 8003038:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800303a:	633b      	str	r3, [r7, #48]	; 0x30
 800303c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800303e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003040:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003042:	e841 2300 	strex	r3, r2, [r1]
 8003046:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1e6      	bne.n	800301c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	3308      	adds	r3, #8
 8003054:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	e853 3f00 	ldrex	r3, [r3]
 800305c:	60fb      	str	r3, [r7, #12]
   return(result);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f023 0301 	bic.w	r3, r3, #1
 8003064:	64bb      	str	r3, [r7, #72]	; 0x48
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	3308      	adds	r3, #8
 800306c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800306e:	61fa      	str	r2, [r7, #28]
 8003070:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003072:	69b9      	ldr	r1, [r7, #24]
 8003074:	69fa      	ldr	r2, [r7, #28]
 8003076:	e841 2300 	strex	r3, r2, [r1]
 800307a:	617b      	str	r3, [r7, #20]
   return(result);
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1e5      	bne.n	800304e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2220      	movs	r2, #32
 8003086:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e012      	b.n	80030bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2220      	movs	r2, #32
 800309a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2220      	movs	r2, #32
 80030a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3758      	adds	r7, #88	; 0x58
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	603b      	str	r3, [r7, #0]
 80030d0:	4613      	mov	r3, r2
 80030d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030d4:	e04f      	b.n	8003176 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030dc:	d04b      	beq.n	8003176 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030de:	f7fd fcb1 	bl	8000a44 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d302      	bcc.n	80030f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d101      	bne.n	80030f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e04e      	b.n	8003196 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0304 	and.w	r3, r3, #4
 8003102:	2b00      	cmp	r3, #0
 8003104:	d037      	beq.n	8003176 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	2b80      	cmp	r3, #128	; 0x80
 800310a:	d034      	beq.n	8003176 <UART_WaitOnFlagUntilTimeout+0xb2>
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	2b40      	cmp	r3, #64	; 0x40
 8003110:	d031      	beq.n	8003176 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	69db      	ldr	r3, [r3, #28]
 8003118:	f003 0308 	and.w	r3, r3, #8
 800311c:	2b08      	cmp	r3, #8
 800311e:	d110      	bne.n	8003142 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2208      	movs	r2, #8
 8003126:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f000 f95b 	bl	80033e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2208      	movs	r2, #8
 8003132:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e029      	b.n	8003196 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	69db      	ldr	r3, [r3, #28]
 8003148:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800314c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003150:	d111      	bne.n	8003176 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800315a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f000 f941 	bl	80033e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2220      	movs	r2, #32
 8003166:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e00f      	b.n	8003196 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	69da      	ldr	r2, [r3, #28]
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	4013      	ands	r3, r2
 8003180:	68ba      	ldr	r2, [r7, #8]
 8003182:	429a      	cmp	r2, r3
 8003184:	bf0c      	ite	eq
 8003186:	2301      	moveq	r3, #1
 8003188:	2300      	movne	r3, #0
 800318a:	b2db      	uxtb	r3, r3
 800318c:	461a      	mov	r2, r3
 800318e:	79fb      	ldrb	r3, [r7, #7]
 8003190:	429a      	cmp	r2, r3
 8003192:	d0a0      	beq.n	80030d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
	...

080031a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b0a3      	sub	sp, #140	; 0x8c
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	4613      	mov	r3, r2
 80031ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	68ba      	ldr	r2, [r7, #8]
 80031b2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	88fa      	ldrh	r2, [r7, #6]
 80031b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	88fa      	ldrh	r2, [r7, #6]
 80031c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2200      	movs	r2, #0
 80031c8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031d2:	d10e      	bne.n	80031f2 <UART_Start_Receive_IT+0x52>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	691b      	ldr	r3, [r3, #16]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d105      	bne.n	80031e8 <UART_Start_Receive_IT+0x48>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f240 12ff 	movw	r2, #511	; 0x1ff
 80031e2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80031e6:	e02d      	b.n	8003244 <UART_Start_Receive_IT+0xa4>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	22ff      	movs	r2, #255	; 0xff
 80031ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80031f0:	e028      	b.n	8003244 <UART_Start_Receive_IT+0xa4>
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10d      	bne.n	8003216 <UART_Start_Receive_IT+0x76>
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d104      	bne.n	800320c <UART_Start_Receive_IT+0x6c>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	22ff      	movs	r2, #255	; 0xff
 8003206:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800320a:	e01b      	b.n	8003244 <UART_Start_Receive_IT+0xa4>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	227f      	movs	r2, #127	; 0x7f
 8003210:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003214:	e016      	b.n	8003244 <UART_Start_Receive_IT+0xa4>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800321e:	d10d      	bne.n	800323c <UART_Start_Receive_IT+0x9c>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	691b      	ldr	r3, [r3, #16]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d104      	bne.n	8003232 <UART_Start_Receive_IT+0x92>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	227f      	movs	r2, #127	; 0x7f
 800322c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003230:	e008      	b.n	8003244 <UART_Start_Receive_IT+0xa4>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	223f      	movs	r2, #63	; 0x3f
 8003236:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800323a:	e003      	b.n	8003244 <UART_Start_Receive_IT+0xa4>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2222      	movs	r2, #34	; 0x22
 8003250:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	3308      	adds	r3, #8
 800325a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800325c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800325e:	e853 3f00 	ldrex	r3, [r3]
 8003262:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8003264:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003266:	f043 0301 	orr.w	r3, r3, #1
 800326a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	3308      	adds	r3, #8
 8003274:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003278:	673a      	str	r2, [r7, #112]	; 0x70
 800327a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800327c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800327e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003280:	e841 2300 	strex	r3, r2, [r1]
 8003284:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8003286:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1e3      	bne.n	8003254 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003290:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003294:	d14f      	bne.n	8003336 <UART_Start_Receive_IT+0x196>
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800329c:	88fa      	ldrh	r2, [r7, #6]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d349      	bcc.n	8003336 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032aa:	d107      	bne.n	80032bc <UART_Start_Receive_IT+0x11c>
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d103      	bne.n	80032bc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	4a47      	ldr	r2, [pc, #284]	; (80033d4 <UART_Start_Receive_IT+0x234>)
 80032b8:	675a      	str	r2, [r3, #116]	; 0x74
 80032ba:	e002      	b.n	80032c2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	4a46      	ldr	r2, [pc, #280]	; (80033d8 <UART_Start_Receive_IT+0x238>)
 80032c0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d01a      	beq.n	8003300 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032d2:	e853 3f00 	ldrex	r3, [r3]
 80032d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80032d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	461a      	mov	r2, r3
 80032e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80032ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032ee:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80032f2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80032f4:	e841 2300 	strex	r3, r2, [r1]
 80032f8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80032fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1e4      	bne.n	80032ca <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	3308      	adds	r3, #8
 8003306:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800330a:	e853 3f00 	ldrex	r3, [r3]
 800330e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003312:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003316:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	3308      	adds	r3, #8
 800331e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003320:	64ba      	str	r2, [r7, #72]	; 0x48
 8003322:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003324:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003326:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003328:	e841 2300 	strex	r3, r2, [r1]
 800332c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800332e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1e5      	bne.n	8003300 <UART_Start_Receive_IT+0x160>
 8003334:	e046      	b.n	80033c4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800333e:	d107      	bne.n	8003350 <UART_Start_Receive_IT+0x1b0>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d103      	bne.n	8003350 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	4a24      	ldr	r2, [pc, #144]	; (80033dc <UART_Start_Receive_IT+0x23c>)
 800334c:	675a      	str	r2, [r3, #116]	; 0x74
 800334e:	e002      	b.n	8003356 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	4a23      	ldr	r2, [pc, #140]	; (80033e0 <UART_Start_Receive_IT+0x240>)
 8003354:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d019      	beq.n	8003392 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003366:	e853 3f00 	ldrex	r3, [r3]
 800336a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800336c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003372:	677b      	str	r3, [r7, #116]	; 0x74
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	461a      	mov	r2, r3
 800337a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800337c:	637b      	str	r3, [r7, #52]	; 0x34
 800337e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003380:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003382:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003384:	e841 2300 	strex	r3, r2, [r1]
 8003388:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800338a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800338c:	2b00      	cmp	r3, #0
 800338e:	d1e6      	bne.n	800335e <UART_Start_Receive_IT+0x1be>
 8003390:	e018      	b.n	80033c4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	e853 3f00 	ldrex	r3, [r3]
 800339e:	613b      	str	r3, [r7, #16]
   return(result);
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	f043 0320 	orr.w	r3, r3, #32
 80033a6:	67bb      	str	r3, [r7, #120]	; 0x78
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	461a      	mov	r2, r3
 80033ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033b0:	623b      	str	r3, [r7, #32]
 80033b2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b4:	69f9      	ldr	r1, [r7, #28]
 80033b6:	6a3a      	ldr	r2, [r7, #32]
 80033b8:	e841 2300 	strex	r3, r2, [r1]
 80033bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1e6      	bne.n	8003392 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	378c      	adds	r7, #140	; 0x8c
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	08003c05 	.word	0x08003c05
 80033d8:	080038a5 	.word	0x080038a5
 80033dc:	080036ed 	.word	0x080036ed
 80033e0:	08003535 	.word	0x08003535

080033e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b095      	sub	sp, #84	; 0x54
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033f4:	e853 3f00 	ldrex	r3, [r3]
 80033f8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80033fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003400:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	461a      	mov	r2, r3
 8003408:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800340a:	643b      	str	r3, [r7, #64]	; 0x40
 800340c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800340e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003410:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003412:	e841 2300 	strex	r3, r2, [r1]
 8003416:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1e6      	bne.n	80033ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	3308      	adds	r3, #8
 8003424:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003426:	6a3b      	ldr	r3, [r7, #32]
 8003428:	e853 3f00 	ldrex	r3, [r3]
 800342c:	61fb      	str	r3, [r7, #28]
   return(result);
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003434:	f023 0301 	bic.w	r3, r3, #1
 8003438:	64bb      	str	r3, [r7, #72]	; 0x48
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	3308      	adds	r3, #8
 8003440:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003442:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003444:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003446:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003448:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800344a:	e841 2300 	strex	r3, r2, [r1]
 800344e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1e3      	bne.n	800341e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800345a:	2b01      	cmp	r3, #1
 800345c:	d118      	bne.n	8003490 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	e853 3f00 	ldrex	r3, [r3]
 800346a:	60bb      	str	r3, [r7, #8]
   return(result);
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	f023 0310 	bic.w	r3, r3, #16
 8003472:	647b      	str	r3, [r7, #68]	; 0x44
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	461a      	mov	r2, r3
 800347a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800347c:	61bb      	str	r3, [r7, #24]
 800347e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003480:	6979      	ldr	r1, [r7, #20]
 8003482:	69ba      	ldr	r2, [r7, #24]
 8003484:	e841 2300 	strex	r3, r2, [r1]
 8003488:	613b      	str	r3, [r7, #16]
   return(result);
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d1e6      	bne.n	800345e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2220      	movs	r2, #32
 8003494:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	675a      	str	r2, [r3, #116]	; 0x74
}
 80034a4:	bf00      	nop
 80034a6:	3754      	adds	r7, #84	; 0x54
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80034ce:	68f8      	ldr	r0, [r7, #12]
 80034d0:	f7ff f9ca 	bl	8002868 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034d4:	bf00      	nop
 80034d6:	3710      	adds	r7, #16
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b088      	sub	sp, #32
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	e853 3f00 	ldrex	r3, [r3]
 80034f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034f8:	61fb      	str	r3, [r7, #28]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	461a      	mov	r2, r3
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	61bb      	str	r3, [r7, #24]
 8003504:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003506:	6979      	ldr	r1, [r7, #20]
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	e841 2300 	strex	r3, r2, [r1]
 800350e:	613b      	str	r3, [r7, #16]
   return(result);
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1e6      	bne.n	80034e4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2220      	movs	r2, #32
 800351a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f7ff f995 	bl	8002854 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800352a:	bf00      	nop
 800352c:	3720      	adds	r7, #32
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
	...

08003534 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b09c      	sub	sp, #112	; 0x70
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003542:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800354c:	2b22      	cmp	r3, #34	; 0x22
 800354e:	f040 80be 	bne.w	80036ce <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003558:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800355c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003560:	b2d9      	uxtb	r1, r3
 8003562:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003566:	b2da      	uxtb	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800356c:	400a      	ands	r2, r1
 800356e:	b2d2      	uxtb	r2, r2
 8003570:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003576:	1c5a      	adds	r2, r3, #1
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003582:	b29b      	uxth	r3, r3
 8003584:	3b01      	subs	r3, #1
 8003586:	b29a      	uxth	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003594:	b29b      	uxth	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	f040 80a1 	bne.w	80036de <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035a4:	e853 3f00 	ldrex	r3, [r3]
 80035a8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80035aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	461a      	mov	r2, r3
 80035b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80035bc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80035c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80035c2:	e841 2300 	strex	r3, r2, [r1]
 80035c6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80035c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1e6      	bne.n	800359c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	3308      	adds	r3, #8
 80035d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d8:	e853 3f00 	ldrex	r3, [r3]
 80035dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80035de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035e0:	f023 0301 	bic.w	r3, r3, #1
 80035e4:	667b      	str	r3, [r7, #100]	; 0x64
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	3308      	adds	r3, #8
 80035ec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80035ee:	647a      	str	r2, [r7, #68]	; 0x44
 80035f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80035f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80035f6:	e841 2300 	strex	r3, r2, [r1]
 80035fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80035fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1e5      	bne.n	80035ce <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2220      	movs	r2, #32
 8003606:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a33      	ldr	r2, [pc, #204]	; (80036e8 <UART_RxISR_8BIT+0x1b4>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d01f      	beq.n	8003660 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d018      	beq.n	8003660 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003636:	e853 3f00 	ldrex	r3, [r3]
 800363a:	623b      	str	r3, [r7, #32]
   return(result);
 800363c:	6a3b      	ldr	r3, [r7, #32]
 800363e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003642:	663b      	str	r3, [r7, #96]	; 0x60
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	461a      	mov	r2, r3
 800364a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800364c:	633b      	str	r3, [r7, #48]	; 0x30
 800364e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003650:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003652:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003654:	e841 2300 	strex	r3, r2, [r1]
 8003658:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800365a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800365c:	2b00      	cmp	r3, #0
 800365e:	d1e6      	bne.n	800362e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003664:	2b01      	cmp	r3, #1
 8003666:	d12e      	bne.n	80036c6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	e853 3f00 	ldrex	r3, [r3]
 800367a:	60fb      	str	r3, [r7, #12]
   return(result);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f023 0310 	bic.w	r3, r3, #16
 8003682:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	461a      	mov	r2, r3
 800368a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800368c:	61fb      	str	r3, [r7, #28]
 800368e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003690:	69b9      	ldr	r1, [r7, #24]
 8003692:	69fa      	ldr	r2, [r7, #28]
 8003694:	e841 2300 	strex	r3, r2, [r1]
 8003698:	617b      	str	r3, [r7, #20]
   return(result);
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1e6      	bne.n	800366e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	69db      	ldr	r3, [r3, #28]
 80036a6:	f003 0310 	and.w	r3, r3, #16
 80036aa:	2b10      	cmp	r3, #16
 80036ac:	d103      	bne.n	80036b6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2210      	movs	r2, #16
 80036b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80036bc:	4619      	mov	r1, r3
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f7ff f8dc 	bl	800287c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80036c4:	e00b      	b.n	80036de <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f7fd f846 	bl	8000758 <HAL_UART_RxCpltCallback>
}
 80036cc:	e007      	b.n	80036de <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	699a      	ldr	r2, [r3, #24]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f042 0208 	orr.w	r2, r2, #8
 80036dc:	619a      	str	r2, [r3, #24]
}
 80036de:	bf00      	nop
 80036e0:	3770      	adds	r7, #112	; 0x70
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	40008000 	.word	0x40008000

080036ec <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b09c      	sub	sp, #112	; 0x70
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80036fa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003704:	2b22      	cmp	r3, #34	; 0x22
 8003706:	f040 80be 	bne.w	8003886 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003710:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003718:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800371a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800371e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003722:	4013      	ands	r3, r2
 8003724:	b29a      	uxth	r2, r3
 8003726:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003728:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800372e:	1c9a      	adds	r2, r3, #2
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800373a:	b29b      	uxth	r3, r3
 800373c:	3b01      	subs	r3, #1
 800373e:	b29a      	uxth	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800374c:	b29b      	uxth	r3, r3
 800374e:	2b00      	cmp	r3, #0
 8003750:	f040 80a1 	bne.w	8003896 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800375a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800375c:	e853 3f00 	ldrex	r3, [r3]
 8003760:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003762:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003764:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003768:	667b      	str	r3, [r7, #100]	; 0x64
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	461a      	mov	r2, r3
 8003770:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003772:	657b      	str	r3, [r7, #84]	; 0x54
 8003774:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003776:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003778:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800377a:	e841 2300 	strex	r3, r2, [r1]
 800377e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003780:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1e6      	bne.n	8003754 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	3308      	adds	r3, #8
 800378c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800378e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003790:	e853 3f00 	ldrex	r3, [r3]
 8003794:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003798:	f023 0301 	bic.w	r3, r3, #1
 800379c:	663b      	str	r3, [r7, #96]	; 0x60
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	3308      	adds	r3, #8
 80037a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80037a6:	643a      	str	r2, [r7, #64]	; 0x40
 80037a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80037ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037ae:	e841 2300 	strex	r3, r2, [r1]
 80037b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80037b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1e5      	bne.n	8003786 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2220      	movs	r2, #32
 80037be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a33      	ldr	r2, [pc, #204]	; (80038a0 <UART_RxISR_16BIT+0x1b4>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d01f      	beq.n	8003818 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d018      	beq.n	8003818 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ec:	6a3b      	ldr	r3, [r7, #32]
 80037ee:	e853 3f00 	ldrex	r3, [r3]
 80037f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80037fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	461a      	mov	r2, r3
 8003802:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003804:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003806:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003808:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800380a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800380c:	e841 2300 	strex	r3, r2, [r1]
 8003810:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1e6      	bne.n	80037e6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800381c:	2b01      	cmp	r3, #1
 800381e:	d12e      	bne.n	800387e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	e853 3f00 	ldrex	r3, [r3]
 8003832:	60bb      	str	r3, [r7, #8]
   return(result);
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	f023 0310 	bic.w	r3, r3, #16
 800383a:	65bb      	str	r3, [r7, #88]	; 0x58
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	461a      	mov	r2, r3
 8003842:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003844:	61bb      	str	r3, [r7, #24]
 8003846:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003848:	6979      	ldr	r1, [r7, #20]
 800384a:	69ba      	ldr	r2, [r7, #24]
 800384c:	e841 2300 	strex	r3, r2, [r1]
 8003850:	613b      	str	r3, [r7, #16]
   return(result);
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1e6      	bne.n	8003826 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	69db      	ldr	r3, [r3, #28]
 800385e:	f003 0310 	and.w	r3, r3, #16
 8003862:	2b10      	cmp	r3, #16
 8003864:	d103      	bne.n	800386e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2210      	movs	r2, #16
 800386c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003874:	4619      	mov	r1, r3
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f7ff f800 	bl	800287c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800387c:	e00b      	b.n	8003896 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f7fc ff6a 	bl	8000758 <HAL_UART_RxCpltCallback>
}
 8003884:	e007      	b.n	8003896 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	699a      	ldr	r2, [r3, #24]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f042 0208 	orr.w	r2, r2, #8
 8003894:	619a      	str	r2, [r3, #24]
}
 8003896:	bf00      	nop
 8003898:	3770      	adds	r7, #112	; 0x70
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	40008000 	.word	0x40008000

080038a4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b0ac      	sub	sp, #176	; 0xb0
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80038b2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	69db      	ldr	r3, [r3, #28]
 80038bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038da:	2b22      	cmp	r3, #34	; 0x22
 80038dc:	f040 8182 	bne.w	8003be4 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80038e6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80038ea:	e125      	b.n	8003b38 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80038f6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80038fa:	b2d9      	uxtb	r1, r3
 80038fc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8003900:	b2da      	uxtb	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003906:	400a      	ands	r2, r1
 8003908:	b2d2      	uxtb	r2, r2
 800390a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003910:	1c5a      	adds	r2, r3, #1
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800391c:	b29b      	uxth	r3, r3
 800391e:	3b01      	subs	r3, #1
 8003920:	b29a      	uxth	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003932:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003936:	f003 0307 	and.w	r3, r3, #7
 800393a:	2b00      	cmp	r3, #0
 800393c:	d053      	beq.n	80039e6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800393e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	2b00      	cmp	r3, #0
 8003948:	d011      	beq.n	800396e <UART_RxISR_8BIT_FIFOEN+0xca>
 800394a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800394e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00b      	beq.n	800396e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2201      	movs	r2, #1
 800395c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003964:	f043 0201 	orr.w	r2, r3, #1
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800396e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d011      	beq.n	800399e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800397a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00b      	beq.n	800399e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2202      	movs	r2, #2
 800398c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003994:	f043 0204 	orr.w	r2, r3, #4
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800399e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80039a2:	f003 0304 	and.w	r3, r3, #4
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d011      	beq.n	80039ce <UART_RxISR_8BIT_FIFOEN+0x12a>
 80039aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00b      	beq.n	80039ce <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2204      	movs	r2, #4
 80039bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c4:	f043 0202 	orr.w	r2, r3, #2
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d006      	beq.n	80039e6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f7fe ff45 	bl	8002868 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f040 80a2 	bne.w	8003b38 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039fc:	e853 3f00 	ldrex	r3, [r3]
 8003a00:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8003a02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	461a      	mov	r2, r3
 8003a12:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a16:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003a18:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8003a1c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003a1e:	e841 2300 	strex	r3, r2, [r1]
 8003a22:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8003a24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1e4      	bne.n	80039f4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	3308      	adds	r3, #8
 8003a30:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a34:	e853 3f00 	ldrex	r3, [r3]
 8003a38:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8003a3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a40:	f023 0301 	bic.w	r3, r3, #1
 8003a44:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	3308      	adds	r3, #8
 8003a4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003a52:	66ba      	str	r2, [r7, #104]	; 0x68
 8003a54:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a56:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003a58:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003a5a:	e841 2300 	strex	r3, r2, [r1]
 8003a5e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8003a60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1e1      	bne.n	8003a2a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2220      	movs	r2, #32
 8003a6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a5f      	ldr	r2, [pc, #380]	; (8003bfc <UART_RxISR_8BIT_FIFOEN+0x358>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d021      	beq.n	8003ac8 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d01a      	beq.n	8003ac8 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a9a:	e853 3f00 	ldrex	r3, [r3]
 8003a9e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003aa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aa2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003aa6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	461a      	mov	r2, r3
 8003ab0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003ab4:	657b      	str	r3, [r7, #84]	; 0x54
 8003ab6:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003aba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003abc:	e841 2300 	strex	r3, r2, [r1]
 8003ac0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003ac2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1e4      	bne.n	8003a92 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d130      	bne.n	8003b32 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ade:	e853 3f00 	ldrex	r3, [r3]
 8003ae2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae6:	f023 0310 	bic.w	r3, r3, #16
 8003aea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	461a      	mov	r2, r3
 8003af4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003af8:	643b      	str	r3, [r7, #64]	; 0x40
 8003afa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003afe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b00:	e841 2300 	strex	r3, r2, [r1]
 8003b04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1e4      	bne.n	8003ad6 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	69db      	ldr	r3, [r3, #28]
 8003b12:	f003 0310 	and.w	r3, r3, #16
 8003b16:	2b10      	cmp	r3, #16
 8003b18:	d103      	bne.n	8003b22 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2210      	movs	r2, #16
 8003b20:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003b28:	4619      	mov	r1, r3
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f7fe fea6 	bl	800287c <HAL_UARTEx_RxEventCallback>
 8003b30:	e002      	b.n	8003b38 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f7fc fe10 	bl	8000758 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003b38:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d006      	beq.n	8003b4e <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8003b40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b44:	f003 0320 	and.w	r3, r3, #32
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f47f aecf 	bne.w	80038ec <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003b54:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003b58:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d049      	beq.n	8003bf4 <UART_RxISR_8BIT_FIFOEN+0x350>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003b66:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d242      	bcs.n	8003bf4 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	3308      	adds	r3, #8
 8003b74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b76:	6a3b      	ldr	r3, [r7, #32]
 8003b78:	e853 3f00 	ldrex	r3, [r3]
 8003b7c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	3308      	adds	r3, #8
 8003b8e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003b92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b94:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b9a:	e841 2300 	strex	r3, r2, [r1]
 8003b9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1e3      	bne.n	8003b6e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a15      	ldr	r2, [pc, #84]	; (8003c00 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8003baa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	e853 3f00 	ldrex	r3, [r3]
 8003bb8:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	f043 0320 	orr.w	r3, r3, #32
 8003bc0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	461a      	mov	r2, r3
 8003bca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003bce:	61bb      	str	r3, [r7, #24]
 8003bd0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd2:	6979      	ldr	r1, [r7, #20]
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	e841 2300 	strex	r3, r2, [r1]
 8003bda:	613b      	str	r3, [r7, #16]
   return(result);
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1e4      	bne.n	8003bac <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003be2:	e007      	b.n	8003bf4 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	699a      	ldr	r2, [r3, #24]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f042 0208 	orr.w	r2, r2, #8
 8003bf2:	619a      	str	r2, [r3, #24]
}
 8003bf4:	bf00      	nop
 8003bf6:	37b0      	adds	r7, #176	; 0xb0
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	40008000 	.word	0x40008000
 8003c00:	08003535 	.word	0x08003535

08003c04 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b0ae      	sub	sp, #184	; 0xb8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003c12:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	69db      	ldr	r3, [r3, #28]
 8003c1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c3a:	2b22      	cmp	r3, #34	; 0x22
 8003c3c:	f040 8186 	bne.w	8003f4c <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003c46:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003c4a:	e129      	b.n	8003ea0 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c52:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8003c5e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8003c62:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8003c66:	4013      	ands	r3, r2
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c6e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c74:	1c9a      	adds	r2, r3, #2
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	3b01      	subs	r3, #1
 8003c84:	b29a      	uxth	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	69db      	ldr	r3, [r3, #28]
 8003c92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003c96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003c9a:	f003 0307 	and.w	r3, r3, #7
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d053      	beq.n	8003d4a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003ca2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d011      	beq.n	8003cd2 <UART_RxISR_16BIT_FIFOEN+0xce>
 8003cae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00b      	beq.n	8003cd2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc8:	f043 0201 	orr.w	r2, r3, #1
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003cd2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d011      	beq.n	8003d02 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8003cde:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d00b      	beq.n	8003d02 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2202      	movs	r2, #2
 8003cf0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cf8:	f043 0204 	orr.w	r2, r3, #4
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d02:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003d06:	f003 0304 	and.w	r3, r3, #4
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d011      	beq.n	8003d32 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8003d0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00b      	beq.n	8003d32 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2204      	movs	r2, #4
 8003d20:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d28:	f043 0202 	orr.w	r2, r3, #2
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d006      	beq.n	8003d4a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f7fe fd93 	bl	8002868 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	f040 80a4 	bne.w	8003ea0 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d60:	e853 3f00 	ldrex	r3, [r3]
 8003d64:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003d66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	461a      	mov	r2, r3
 8003d76:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d7e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d80:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d82:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003d86:	e841 2300 	strex	r3, r2, [r1]
 8003d8a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003d8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1e2      	bne.n	8003d58 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	3308      	adds	r3, #8
 8003d98:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d9c:	e853 3f00 	ldrex	r3, [r3]
 8003da0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003da2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003da4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003da8:	f023 0301 	bic.w	r3, r3, #1
 8003dac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	3308      	adds	r3, #8
 8003db6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003dba:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003dbc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dbe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003dc0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003dc2:	e841 2300 	strex	r3, r2, [r1]
 8003dc6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003dc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1e1      	bne.n	8003d92 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2220      	movs	r2, #32
 8003dd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a5f      	ldr	r2, [pc, #380]	; (8003f64 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d021      	beq.n	8003e30 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d01a      	beq.n	8003e30 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e02:	e853 3f00 	ldrex	r3, [r3]
 8003e06:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003e08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e0a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	461a      	mov	r2, r3
 8003e18:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003e1c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e1e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e20:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e24:	e841 2300 	strex	r3, r2, [r1]
 8003e28:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003e2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1e4      	bne.n	8003dfa <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d130      	bne.n	8003e9a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e46:	e853 3f00 	ldrex	r3, [r3]
 8003e4a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e4e:	f023 0310 	bic.w	r3, r3, #16
 8003e52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003e60:	647b      	str	r3, [r7, #68]	; 0x44
 8003e62:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e64:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e68:	e841 2300 	strex	r3, r2, [r1]
 8003e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1e4      	bne.n	8003e3e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	69db      	ldr	r3, [r3, #28]
 8003e7a:	f003 0310 	and.w	r3, r3, #16
 8003e7e:	2b10      	cmp	r3, #16
 8003e80:	d103      	bne.n	8003e8a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2210      	movs	r2, #16
 8003e88:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003e90:	4619      	mov	r1, r3
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7fe fcf2 	bl	800287c <HAL_UARTEx_RxEventCallback>
 8003e98:	e002      	b.n	8003ea0 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7fc fc5c 	bl	8000758 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003ea0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d006      	beq.n	8003eb6 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8003ea8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003eac:	f003 0320 	and.w	r3, r3, #32
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f47f aecb 	bne.w	8003c4c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003ebc:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003ec0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d049      	beq.n	8003f5c <UART_RxISR_16BIT_FIFOEN+0x358>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003ece:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d242      	bcs.n	8003f5c <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	3308      	adds	r3, #8
 8003edc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee0:	e853 3f00 	ldrex	r3, [r3]
 8003ee4:	623b      	str	r3, [r7, #32]
   return(result);
 8003ee6:	6a3b      	ldr	r3, [r7, #32]
 8003ee8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	3308      	adds	r3, #8
 8003ef6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003efa:	633a      	str	r2, [r7, #48]	; 0x30
 8003efc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003efe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f02:	e841 2300 	strex	r3, r2, [r1]
 8003f06:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1e3      	bne.n	8003ed6 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a15      	ldr	r2, [pc, #84]	; (8003f68 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8003f12:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	e853 3f00 	ldrex	r3, [r3]
 8003f20:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f043 0320 	orr.w	r3, r3, #32
 8003f28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	461a      	mov	r2, r3
 8003f32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f36:	61fb      	str	r3, [r7, #28]
 8003f38:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f3a:	69b9      	ldr	r1, [r7, #24]
 8003f3c:	69fa      	ldr	r2, [r7, #28]
 8003f3e:	e841 2300 	strex	r3, r2, [r1]
 8003f42:	617b      	str	r3, [r7, #20]
   return(result);
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1e4      	bne.n	8003f14 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003f4a:	e007      	b.n	8003f5c <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	699a      	ldr	r2, [r3, #24]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f042 0208 	orr.w	r2, r2, #8
 8003f5a:	619a      	str	r2, [r3, #24]
}
 8003f5c:	bf00      	nop
 8003f5e:	37b8      	adds	r7, #184	; 0xb8
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	40008000 	.word	0x40008000
 8003f68:	080036ed 	.word	0x080036ed

08003f6c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d101      	bne.n	8003fbe <HAL_UARTEx_DisableFifoMode+0x16>
 8003fba:	2302      	movs	r3, #2
 8003fbc:	e027      	b.n	800400e <HAL_UARTEx_DisableFifoMode+0x66>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2224      	movs	r2, #36	; 0x24
 8003fca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f022 0201 	bic.w	r2, r2, #1
 8003fe4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003fec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2220      	movs	r2, #32
 8004000:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3714      	adds	r7, #20
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr

0800401a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800401a:	b580      	push	{r7, lr}
 800401c:	b084      	sub	sp, #16
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
 8004022:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800402a:	2b01      	cmp	r3, #1
 800402c:	d101      	bne.n	8004032 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800402e:	2302      	movs	r3, #2
 8004030:	e02d      	b.n	800408e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2201      	movs	r2, #1
 8004036:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2224      	movs	r2, #36	; 0x24
 800403e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f022 0201 	bic.w	r2, r2, #1
 8004058:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	683a      	ldr	r2, [r7, #0]
 800406a:	430a      	orrs	r2, r1
 800406c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 f850 	bl	8004114 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2220      	movs	r2, #32
 8004080:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004096:	b580      	push	{r7, lr}
 8004098:	b084      	sub	sp, #16
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
 800409e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d101      	bne.n	80040ae <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80040aa:	2302      	movs	r3, #2
 80040ac:	e02d      	b.n	800410a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2224      	movs	r2, #36	; 0x24
 80040ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 0201 	bic.w	r2, r2, #1
 80040d4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	683a      	ldr	r2, [r7, #0]
 80040e6:	430a      	orrs	r2, r1
 80040e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 f812 	bl	8004114 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2220      	movs	r2, #32
 80040fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3710      	adds	r7, #16
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
	...

08004114 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004114:	b480      	push	{r7}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004120:	2b00      	cmp	r3, #0
 8004122:	d108      	bne.n	8004136 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004134:	e031      	b.n	800419a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004136:	2308      	movs	r3, #8
 8004138:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800413a:	2308      	movs	r3, #8
 800413c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	0e5b      	lsrs	r3, r3, #25
 8004146:	b2db      	uxtb	r3, r3
 8004148:	f003 0307 	and.w	r3, r3, #7
 800414c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	0f5b      	lsrs	r3, r3, #29
 8004156:	b2db      	uxtb	r3, r3
 8004158:	f003 0307 	and.w	r3, r3, #7
 800415c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800415e:	7bbb      	ldrb	r3, [r7, #14]
 8004160:	7b3a      	ldrb	r2, [r7, #12]
 8004162:	4911      	ldr	r1, [pc, #68]	; (80041a8 <UARTEx_SetNbDataToProcess+0x94>)
 8004164:	5c8a      	ldrb	r2, [r1, r2]
 8004166:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800416a:	7b3a      	ldrb	r2, [r7, #12]
 800416c:	490f      	ldr	r1, [pc, #60]	; (80041ac <UARTEx_SetNbDataToProcess+0x98>)
 800416e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004170:	fb93 f3f2 	sdiv	r3, r3, r2
 8004174:	b29a      	uxth	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800417c:	7bfb      	ldrb	r3, [r7, #15]
 800417e:	7b7a      	ldrb	r2, [r7, #13]
 8004180:	4909      	ldr	r1, [pc, #36]	; (80041a8 <UARTEx_SetNbDataToProcess+0x94>)
 8004182:	5c8a      	ldrb	r2, [r1, r2]
 8004184:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004188:	7b7a      	ldrb	r2, [r7, #13]
 800418a:	4908      	ldr	r1, [pc, #32]	; (80041ac <UARTEx_SetNbDataToProcess+0x98>)
 800418c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800418e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004192:	b29a      	uxth	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800419a:	bf00      	nop
 800419c:	3714      	adds	r7, #20
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	08004250 	.word	0x08004250
 80041ac:	08004258 	.word	0x08004258

080041b0 <memset>:
 80041b0:	4402      	add	r2, r0
 80041b2:	4603      	mov	r3, r0
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d100      	bne.n	80041ba <memset+0xa>
 80041b8:	4770      	bx	lr
 80041ba:	f803 1b01 	strb.w	r1, [r3], #1
 80041be:	e7f9      	b.n	80041b4 <memset+0x4>

080041c0 <__libc_init_array>:
 80041c0:	b570      	push	{r4, r5, r6, lr}
 80041c2:	4d0d      	ldr	r5, [pc, #52]	; (80041f8 <__libc_init_array+0x38>)
 80041c4:	4c0d      	ldr	r4, [pc, #52]	; (80041fc <__libc_init_array+0x3c>)
 80041c6:	1b64      	subs	r4, r4, r5
 80041c8:	10a4      	asrs	r4, r4, #2
 80041ca:	2600      	movs	r6, #0
 80041cc:	42a6      	cmp	r6, r4
 80041ce:	d109      	bne.n	80041e4 <__libc_init_array+0x24>
 80041d0:	4d0b      	ldr	r5, [pc, #44]	; (8004200 <__libc_init_array+0x40>)
 80041d2:	4c0c      	ldr	r4, [pc, #48]	; (8004204 <__libc_init_array+0x44>)
 80041d4:	f000 f818 	bl	8004208 <_init>
 80041d8:	1b64      	subs	r4, r4, r5
 80041da:	10a4      	asrs	r4, r4, #2
 80041dc:	2600      	movs	r6, #0
 80041de:	42a6      	cmp	r6, r4
 80041e0:	d105      	bne.n	80041ee <__libc_init_array+0x2e>
 80041e2:	bd70      	pop	{r4, r5, r6, pc}
 80041e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80041e8:	4798      	blx	r3
 80041ea:	3601      	adds	r6, #1
 80041ec:	e7ee      	b.n	80041cc <__libc_init_array+0xc>
 80041ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80041f2:	4798      	blx	r3
 80041f4:	3601      	adds	r6, #1
 80041f6:	e7f2      	b.n	80041de <__libc_init_array+0x1e>
 80041f8:	08004268 	.word	0x08004268
 80041fc:	08004268 	.word	0x08004268
 8004200:	08004268 	.word	0x08004268
 8004204:	0800426c 	.word	0x0800426c

08004208 <_init>:
 8004208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800420a:	bf00      	nop
 800420c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800420e:	bc08      	pop	{r3}
 8004210:	469e      	mov	lr, r3
 8004212:	4770      	bx	lr

08004214 <_fini>:
 8004214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004216:	bf00      	nop
 8004218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800421a:	bc08      	pop	{r3}
 800421c:	469e      	mov	lr, r3
 800421e:	4770      	bx	lr
